<?xml version="1.0"?>

<project name="jsettlers" default="build">

<!--
 This file is part of Java Settlers - An online multiplayer version of the game Settlers of Catan
 and also includes a build-i18neditor target for the PTEMain i18n editor (PTE.jar) not built by default.

 Copyright (C) 2004-2005 Chadwick A McHenry (mchenryc@acm.org)
 Portions of this file Copyright (C) 2007-2016 Jeremy D Monin (jeremy@nand.net)

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see http://www.gnu.org/licenses/ .
 -->

  <!-- Reminder for javac tasks: To prevent ant 1.8+ warning message, use includeantruntime="false" -->
  <!-- Reminder for tar tasks: ant 1.7+ assumed; uses ant's internal tar implementation
       and not the system tar, which means on OSX it won't include junk ._* files -->

  <!-- Give user a chance to override without editing this file
       (and without typing -D each time compiling) -->
  <property file="build.properties" />
  <property file="${user.home}/build.properties" />
  <property environment="env" />

  <property name="debug"       value="true" />
  <property name="optimize"    value="true" />
  <property name="deprecation" value="false" />

  <property name="name"      value="jsettlers" />
  <property name="Name"      value="JSettlers" />
  <!-- version under development, e.g. 1.1, 1.2-RC2, 2.0-SNAPSHOT -->
  <property name="version"   value="2.0.00" />
  <property name="versionnum" value="2000" />
  <!-- maximum recent version number to not warn during new game creation; -->
  <!-- should be a version released more than a year ago. -->
  <!-- Special case: New major version v2.0.00 has itself as this "no-warn" version -->
  <!-- to avoid unnecessary warning dialogs. -->
  <property name="versionnumMaxNoWarn" value="2000" />
  <property name="copyright" value="2001-2004 Robb Thomas, portions (C) 2007-2016 Jeremy D Monin and contributors" />
  <property name="url"       value="http://nand.net/jsettlers/devel/" />
  <!-- version string for the PTE i18n editor; written to net/nand/util/i18n/gui/pteversion.properties during build-i18neditor -->
  <property name="i18neditor.version" value="1.0.0" />

  <!-- For startup arguments, see README or run client/server with -h -->
  <property name="client.class"   value="soc.client.SOCPlayerClient" />
  <property name="server.class"   value="soc.server.SOCServer" />
  <property name="main.class"     value="${client.class}" />
  <property name="i18neditor.class" value="net.nand.util.i18n.gui.PTEMain" />

  <!-- directory names -->
  <!-- These must remain simple values, (relative to basedir) -->
  <property name="src"            value="src" />
  <property name="lib"            value="lib" /> <!-- 3rd party libs -->
  <property name="docs.src"       value="xdocs" />
  <property name="bin.src"        value="src/bin" />
  <property name="java.src"       value="src/java" />
  <property name="test.src"       value="src/test" />
  <property name="web.src"        value="src/web" />
  <property name="test"           value="test" />
  <property name="target"         location="target" />
  <property name="classes"        location="${target}/classes" />
  <property name="bin.target"     location="${target}/bin" />
  <property name="lib.target"     location="${target}/lib" />
  <property name="test.classes"   location="${target}/test-classes" />
  <property name="test.reports"   location="${target}/test-reports" />
  <property name="docs.generated" location="${target}/generated-xdocs" />
  <property name="docs.target"    location="${target}/docs" />
  <property name="api.target"     location="${docs.target}/api" />
  <property name="dist"           location="dist" />

  <!-- version file basename relative to ${classes} and ${java.src} -->
  <property name="version.info" value="resources/version.info" />

  <!-- packaging -->
  <property name="client.jar" value="${Name}.jar" />
  <property name="server.jar" value="${Name}Server.jar" />
  <property name="test.jar"   value="${Name}Test.jar" /><!-- unused -->
  <property name="i18neditor.jar" value="PTE.jar" />

  <property name="dist.name"     value="${name}-${version}" />
  <property name="dist.src.name" value="${dist.name}-src" />
  <property name="dist.full.name" value="${dist.name}" /><!-- jsettlers-2.x.xx, not jsettlers-2.x.xx-full -->
  <property name="dist.src.tmp"  value="${dist}/${dist.src.name}" /><!-- jsettlers-2.x.xx-src tmp dir -->
  <property name="dist.full.tmp" value="${dist}/${dist.full.name}" /><!-- jsettlers-2.x.xx tmp dir -->

  <property name="installer.jar" value="${dist}/${dist.name}-installer.jar" />
  <property name="dist.tgz"      value="${dist}/${dist.name}.tar.gz" />
  <property name="dist.zip"      value="${dist}/${dist.name}.zip" />
  <property name="dist.full.tgz" value="${dist}/${dist.full.name}-full.tar.gz" /><!-- jsettlers-2.x.xx-full.tar.gz -->
  <property name="dist.src.tgz"  value="${dist}/${dist.src.name}.tar.gz" />
  <property name="dist.src.zip"  value="${dist}/${dist.src.name}.zip" />

  <!-- files for the distributions (dist-src, dist-full, etc) -->
  <fileset id="readme.files" dir=".">
    <include name="*.txt" />  <!-- README.txt, COPYING*.txt, VERSIONS.txt -->
    <include name="README.developer" />
  </fileset>

  <!-- jar file packages -->
  <patternset id="server.files">
    <include name="resources/" />   <!-- for version file -->
    <include name="soc/" />         <!-- everything... -->
    <exclude name="soc/client/" />  <!-- ...except these -->
    <include name="net/nand/util/i18n/mgr/" />         <!-- i18n string manager -->
  </patternset>
  <patternset id="client.files">
    <include name="resources/" />   <!-- client may run local server -->
    <include name="soc/" />         <!-- thus, everything -->
    <include name="net/nand/util/i18n/mgr/" />         <!-- i18n string manager -->
  </patternset>
  <patternset id="i18neditor.files">
    <include name="net/nand/util/i18n/" />         <!-- i18n editor gui, string manager, parser/writer -->
  </patternset>

  <!-- external libraries -->
  <fileset id="ext.libs" dir="${lib}" includes="*.jar" />

  <!-- class paths -->
  <path id="classpath">
    <pathelement location="${classes}" />
    <fileset dir="${lib.target}" includes="*.jar" />
  </path>

  <!-- Not used: For later.... -->
  <path id="ext.cp">
    <fileset refid="${ext.libs}" />
  </path>

  <!-- Not used: For later.... -->
  <path id="installer.cp">
    <path refid="classpath" />
    <pathelement location="${izpack.home}/lib/compiler.jar" />
  </path>

  <!-- ************************************** -->
  <!-- Initialization -->
  <!-- ************************************** -->

  <target name="init">
      <tstamp />
  </target>

  <target name="init-libs" depends="init">
      <mkdir dir="${lib.target}" />
      <!-- Later: when we use external libraries
      <copy toDir="${lib.target}">
        <fileset refid="ext.libs" />
      </copy> -->
  </target>

  <target name="resources"
          description="Copy resources to classes directory">
      <copy toDir="${classes}">
        <fileset dir="${java.src}" includes="soc/**/*.gif" />
        <fileset dir="${java.src}" includes="soc/**/*.properties" />
      </copy>
  </target>

  <target name="resources-i18neditor"
          description="Copy resources for i18n editor to classes directory; update pteversion.properties" >
      <echo append="false" file="${java.src}/net/nand/util/i18n/gui/pteversion.properties"># PTE version file - updated by resources-i18neditor ant task
pte.version = ${i18neditor.version}
</echo>
      <copy toDir="${classes}">
        <fileset dir="${java.src}" includes="net/nand/util/i18n/gui/strings/*.properties" />
        <fileset dir="${java.src}" includes="net/nand/util/i18n/gui/pteversion.properties" />
      </copy>
  </target>

  <!-- ************************************** -->
  <!-- Third party dependancy checks -->
  <!-- ************************************** -->

  <!-- Not used: For later.... -->
  <target name="check-junit" depends="init">
     <available property="junit.present"
                classname="junit.framework.TestCase"
                classpathref="ext.cp" />
  </target>

  <!-- Not used: For later installer.... see http://izpack.org/ -->
  <target name="check-izpack" depends="init">
      <available property="izpack.present"
                 classname="com.izforge.izpack.ant.IzPackTask"
                 classpathref="installer.cp" />
      <fail unless="izpack.present">

         The IzPack program is not available.  Download it from
         http://izpack.org/.  Install it, and set the
         'izpack.home' property in build.properties.
      </fail>
  </target>

  <!-- ************************************** -->
  <!-- Compilation targets -->
  <!-- ************************************** -->

  <!-- Compile the java code from ${java.src} into ${classes} so
       that tests can be done on compiled classes without creating
       distribution tarballs; includes jsettlers and i18neditor
       because everything is in java.src -->
  <target name="compile" depends="init-libs,resources,resources-i18neditor"
          description="Compile class files into 'classes'.">
      <!-- version updates when info build.xml changes -->
      <dependset>
        <srcfilelist dir="${basedir}" files="build.xml" />
        <targetfilelist dir="${classes}" files="${version.info}" />
      </dependset>
      <copy file="${java.src}/${version.info}.in"
            tofile="${classes}/${version.info}">
        <filterset>
          <filter token="VERSION" value="${version}" />
          <filter token="VERSIONNUM" value="${versionnum}" />
          <filter token="VERSIONNUMMAXNOWARN" value="${versionnumMaxNoWarn}" />
          <filter token="COPYRIGHT" value="${copyright}" />
        </filterset>
      </copy>

      <javac srcdir="${java.src}"
             destdir="${classes}"
             classpathref="classpath"
             debug="${debug}"
             optimize="${optimize}"
             includeantruntime="false"
             deprecation="${deprecation}"
      		 encoding="iso-8859-1"/>
  </target>

  <!-- Create two jars: client and server (which depends on client because bots are clients) -->
  <target name="build" depends="compile"
          description="Create project jar files.">
      <jar destfile="${target}/${client.jar}" basedir="${classes}">
        <patternset refid="client.files" />
        <manifest>
          <attribute name="Main-Class" value="${client.class}" />
        </manifest>
      </jar>
      <jar destfile="${target}/${server.jar}" basedir="${classes}">
        <patternset refid="server.files" />
        <manifest>
          <attribute name="Main-Class" value="${server.class}" />
          <attribute name="Class-Path" value="${client.jar}" />
        </manifest>
      </jar>
  </target>

  <!-- i18n editor: Create jar -->
  <target name="build-i18neditor" depends="compile,resources-i18neditor"
          description="Create the PTE i18n editor jar file." >
      <jar destfile="${target}/${i18neditor.jar}" basedir="${classes}">
        <patternset refid="i18neditor.files" />
        <manifest>
          <attribute name="Main-Class" value="${i18neditor.class}" />
          <attribute name="Implementation-Version" value="${i18neditor.version}" />
        </manifest>
      </jar>
  </target>

  <!-- ************************************** -->
  <!-- Testing targets -->
  <!-- ************************************** -->

  <target name="test" depends="build"
          description="Run tests against the built JARs; fail the build if any errors">
      <echo message="Running tests, wait for output:" />
      <!--
        These take more than a minute to run; the python script produces output after
        each test, but ant buffers it all; no output appears until the script completes.

        When we later have multiple test scripts, don't immediately fail: Instead set
        properties (failonerror="false" resultproperty="test.1.exitcode", etc)
        and check the properties after all tests have ran.
       -->
      <exec dir="${test}/bin" executable="python" failonerror="true">
        <arg line="test_func_srv_startup_params.py" />
      </exec>
      <echo message="Tests completed successfully." />
  </target>

  <target name="unused_old_example_test" depends="unused_old_example_compile-tests">
      <mkdir dir="${test.reports}" />
      <junit dir="./"
             failureproperty="test.failure"
             printSummary="yes"
             fork="true"
             haltonerror="no">
        <sysproperty key="basedir" value="." />
        <formatter type="xml" />
        <formatter usefile="true" type="plain" />
        <classpath>
          <fileset refid="ext.libs" />
          <pathelement path="${test.classes}" />
          <pathelement path="${classes}" />
        </classpath>
        <batchtest fork="yes" todir="${test.reports}">
          <fileset dir="${test.classes}">
            <include name="**/Test*.class"/>
            <exclude name="**/TestAll.class"/>
          </fileset>
        </batchtest>
      </junit>

      <junitreport>
        <fileset dir="${test.reports}" includes="TEST-*.xml" />
        <report format="noframes" />
      </junitreport>

      <fail if="test.failure" message="There were test failures." />
  </target>

  <target name="unused_old_example_compile-tests" depends="compile">
      <mkdir dir="${test.classes}" />
      <javac srcdir="${test.src}"
             destdir="${test.classes}"
             classpathref="classpath"
             debug="${debug}"
             optimize="${optimize}"
             includeantruntime="false"
             deprecation="${deprecation}" />
  </target>


  <!-- ************************************** -->
  <!-- Distribution targets -->
  <!-- These create top-level dist/ dir if not already present -->
  <!-- ************************************** -->

  <!-- (UNUSED) Prevent build warning if IzPack not available -->
  <macrodef name="taskdef-unchecked" description="create a taskdef, without warning when classname isn't available">
	<attribute name="taskname" />
	<attribute name="classname" />
    <attribute name="cp-ref" />
	<sequential>
	<taskdef name="@{taskname}"
		classname="@{classname}"
		classpathref="{@cp-ref}" />
	</sequential>
  </macrodef>

  <!-- (UNUSED) Create installer (requires IzPack) -->
  <target name="installer" depends="check-izpack,build,docs"
  	      if="izpack.present"
          description="Create installer (Need IzPack: http://izpack.org/)">

      <fail>An installation file has not yet been created.</fail>
      <mkdir dir="${dist}" />
      <taskdef-unchecked taskname="izpack" classname="com.izforge.izpack.ant.IzPackTask"
              classpathref="installer.cp" />
      <izpack input="${src}/installer/install.xml"
              output="${installer.jar}"
              installerType="standard"
              basedir="."
              izPackDir="${izpack.home}" />
  </target>

  <!-- Create distribution tarballs -->
  <target name="dist" depends="build,docs"
          description="Build distribution tarballs and zips.">
      <property name="dist.tmp" value="${dist}/${dist.name}" />
      <delete dir="${dist.tmp}" quiet="true" />

      <copy todir="${dist.tmp}" preservelastmodified="true">
        <fileset refid="readme.files" />
        <!-- program and libs -->
        <fileset dir="${target}">
          <include name="${client.jar}" />
          <include name="${server.jar}" />
          <include name="docs/" />
          <include name="lib/" />
        </fileset>
      </copy>
      <copy todir="${dist.tmp}/web">
        <fileset dir="${web.src}" />
      </copy>

      <tar destfile="${dist.tgz}" compression="gzip"
           basedir="${dist}" includes="${dist.name}/" />
      <zip destfile="${dist.zip}"
           basedir="${dist}" includes="${dist.name}/" />

      <!-- clean up -->
      <delete dir="${dist.tmp}" quiet="true" />
  </target>

  <!-- For dist-src or dist-full, ensure no git-untracked files or uncommited changes in repo -->
  <target name="-dist-check-src-untracked">
      <!-- Adapted from mark-longair's 2011-02-28 answer at
          http://stackoverflow.com/questions/5139290/how-to-check-if-theres-nothing-to-be-committed-in-the-current-branch -->
      <!-- any untracked? -->
      <exec executable="git"
          dir="${basedir}"
          outputproperty="dist-check-src-ut.out"
          >
          <arg value="ls-files" />
          <arg value="--other"  />
          <arg value="--exclude-standard" />
          <arg value="--directory" />
          <arg value="--no-empty-directory" /><!-- ignore dist/, target/classes/ (/.gitignore has "dist/*") -->
      </exec>
      <fail message="Untracked files in repo: commit, move, or .gitignore:${line.separator}${dist-check-src-ut.out}">
          <condition>
              <not><equals arg1="${dist-check-src-ut.out}" arg2="" trim="yes" /></not>
          </condition>
      </fail>
      <!-- any unstaged or uncommitted? -->
      <exec executable="git"
          dir="${basedir}"
          outputproperty="dist-chk-src-us.out" resultproperty="dist-chk-src-us.result"
          >
          <arg value="diff" />
          <arg value="--name-only" />
          <arg value="--exit-code" />
      </exec>
      <fail message="Unstaged modified files in repo: commit or revert:${line.separator}${dist-chk-src-us.out}">
          <condition>
              <not><equals arg1="${dist-chk-src-us.result}" arg2="0" /></not>
          </condition>
      </fail>
      <exec executable="git"
          dir="${basedir}"
          outputproperty="dist-chk-src-uc.out" resultproperty="dist-chk-src-uc.result"
          >
          <arg value="diff" />
          <arg value="--cached" />
          <arg value="--name-only" />
          <arg value="--exit-code" />
      </exec>
      <fail message="Staged uncommitted files in repo: commit or unstage:${line.separator}${dist-chk-src-uc.out}">
          <condition>
              <not><equals arg1="${dist-chk-src-uc.result}" arg2="0" /></not>
          </condition>
      </fail>
  </target>

  <!-- Copy files to set up for dist-src and/or dist-full -->
  <target name="-dist-copy-src" depends="-dist-check-src-untracked">
      <!--
        This copies everything in your "src" directory, so be sure
        to run on a clean repository only!
       -->

      <delete dir="${dist.src.tmp}" quiet="true" />

      <copy todir="${dist.src.tmp}" preservelastmodified="true">
        <fileset refid="readme.files" />
        <fileset dir="." defaultexcludes="no" >
          <include name="build.xml" />
          <include name="build.properties" />
          <include name="${src}/" />
          <include name="${test}/src/" /> <!-- might not exist -->
          <include name="${test}/bin/" />
          <include name="${test}/tmp/.gitignore" />
          <include name="target/lib/.gitignore" /><!-- target/lib/ prevents eclipse ant import error; v1.1.16+ -->
          <include name=".classpath" />
          <include name=".gitignore" />
          <!-- debug reminder: copy supports verbose="true" -->
        </fileset>
      </copy>
  </target>

  <!-- Create a source tarball suitable for building the project -->
  <target name="dist-src" depends="init,-dist-copy-src"
          description="Create a tarball of the source tree, with all contents placed within jsettlers-[version]-src/; follow with dist-full and/or dist-tar-clean" >

      <tar destfile="${dist.src.tgz}" compression="gzip"
           longfile="gnu" defaultexcludes="no"
           basedir="${dist}" includes="${dist.src.name}/" />

      <!-- reminder: clean up by calling dist-tar-clean, maybe after dist-full -->
  </target>

  <!-- Create a full tarball: source + target/JSettlers*.jar suitable for running the project -->
  <target name="dist-full" depends="dist-src,build"
          description="After dist-src: Create a tarball of the source + JSettlers*.jar, with all contents placed within jsettlers-[version]-full/; follow with dist-tar-clean" >

      <delete dir="${dist.full.tmp}" quiet="true" />
      <move file="${dist.src.tmp}" tofile="${dist.full.tmp}" />
      <copy todir="${dist.full.tmp}" preservelastmodified="true">
        <!-- copy JSettlers*.jar to jsettlers-2.x.xx-full/, not jsettlers-2.x.xx-full/target/ -->
        <fileset dir="${target}" >
          <include name="${server.jar}" />
          <include name="${client.jar}" />
          <!-- debug reminder: copy supports verbose="true" -->
        </fileset>
      </copy>
      <tar destfile="${dist.full.tgz}" compression="gzip"
           longfile="gnu" defaultexcludes="no"
           basedir="${dist}" includes="${dist.full.name}/" />

      <!-- reminder: clean up by calling dist-tar-clean -->
  </target>

  <!-- Cleanup after dist-src and/or dist-full -->
  <target name="dist-tar-clean" description="Clean up temp files after dist-src and/or dist-full">
      <delete dir="${dist.src.tmp}" quiet="true" />
      <delete dir="${dist.full.tmp}" quiet="true" />
  </target>

  <!-- clean the distribution directory -->
  <target name="dist-clean-all" depends="init">
      <delete quiet="true" includeEmptyDirs="true">
        <fileset dir="${dist}/" defaultExcludes="no" />
      </delete>
  </target>


  <!-- ************************************** -->
  <!-- Documentation targets -->
  <!-- ************************************** -->

  <!-- all documentation -->
  <target name="docs" depends="docs.users,javadoc" />

  <target name="docs.users">
      <!-- No munging, simply copy -->
      <copy todir="${docs.target}">
        <fileset dir="${src}/docs" />
      </copy>
  </target>

  <!-- generate javadoc -->
  <target name="javadoc" depends="init-libs"
          description="Creates javadoc in 'docs/api'">
      <mkdir dir="${api.target}" />
      <javadoc sourcepath="${java.src}"
               destdir="${api.target}"
               classpathref="classpath"
               author="true"
               version="true"
               overview="${java.src}/main-overview.html"
               doctitle="${Name}, v ${version}, API Specification"
               windowtitle="${Name} v${version} API"
               access="package"
               source="1.4"
               additionalparam="-breakiterator">
        <packageset dir="${java.src}" />
        <header><![CDATA[<b><a target="_blank" href="${url}">${Name} v${version} API</a></b><br><font size="-2">Built ${date}</font>]]></header>
      </javadoc>
  </target>


  <!-- ************************************** -->
  <!-- Other targets -->
  <!-- ************************************** -->

  <!-- Delete all artifacts of the project, i.e. ${target} & ${dist} -->
  <target name="clean" depends="init"
          description="Cleans the project of all generated files">
      <delete quiet="true" includeEmptyDirs="true">
        <fileset dir="${target}/" defaultExcludes="no" />
        <fileset dir="${dist}/" defaultExcludes="no" />
      </delete>
  </target>

</project>
