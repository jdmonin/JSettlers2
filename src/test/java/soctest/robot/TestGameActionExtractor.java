/**
 * Java Settlers - An online multiplayer version of the game Settlers of Catan
 * This file Copyright (C) 2021 Jeremy D Monin <jeremy@nand.net>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The maintainer of this program can be reached at jsettlers@nand.net
 **/

package soctest.robot;

import java.io.IOException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.NoSuchElementException;

import soc.extra.robot.GameActionExtractor;
import soc.extra.robot.GameActionLog;
import soc.extra.robot.GameActionLog.Action.ActionType;
import soc.extra.server.GameEventLog;
import soc.extra.server.GameEventLog.EventEntry;
import soc.game.SOCDevCardConstants;
import soc.game.SOCGame;
import soc.game.SOCPlayingPiece;
import soc.game.SOCResourceSet;
import soc.game.SOCScenario;
import soc.message.SOCCancelBuildRequest;
import soc.message.SOCGameElements;
import soc.message.SOCGameServerText;
import soc.message.SOCGameState;
import soc.message.SOCMessage;
import soc.message.SOCNewGame;
import soc.message.SOCPlayerElement;
import soc.message.SOCPutPiece;
import soc.message.SOCRollDiceRequest;
import soc.message.SOCStartGame;
import soc.message.SOCTurn;
import soc.message.SOCVersion;
import soc.util.Version;
import soctest.server.TestGameEventLog;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 * A few tests for {@link GameActionLog} and {@link GameActionExtractor}.
 *<P>
 * Extends {@code GameActionExtractor} as an easy way to access its methods being tested.
 *
 * @since 2.5.00
 */
public class TestGameActionExtractor
    extends GameActionExtractor
{
    public TestGameActionExtractor()
    {
        super(makeEmptyEventLog(), true);
    }

    /** Number of event log entries generated by {@link #makeEmptyEventLog()}. */
    private static final int EMPTYEVENTLOG_SIZE_TO_STARTGAME = 4;

    /** Game state at end of event sequence from {@link #makeEmptyEventLog()}. */
    private static final int EMPTYEVENTLOG_STARTGAME_GAME_STATE = SOCGame.START1A;

    /**
     * Create an event log with the minimal required entries. Ends with {@link SOCStartGame},
     * to be extracted into a {@link ActionType#LOG_START_TO_STARTGAME} {@link GameActionLog.Action}.
     */
    private static GameEventLog makeEmptyEventLog()
    {
        GameEventLog log = new GameEventLog(null, false);
        log.add(new EventEntry(new SOCVersion
            (Version.versionNumber(), Version.version(), "-", null, null), -1, false, -1));
        log.add(new EventEntry(new SOCNewGame("test"), -1, false, -1));
        log.add(new EventEntry("Extractor expects to see version, newgame, and startgame"));
        log.add(new EventEntry(new SOCStartGame("test", EMPTYEVENTLOG_STARTGAME_GAME_STATE), -1, false, -1));

        return log;
    }

    /**
     * Test the {@link ActionType} enum's {@link ActionType#valueOf(int)} method
     * and {@link ActionType#value} uniqueness.
     */
    @Test
    public void testBasicsActionEnum()
    {
        assertEquals(0, ActionType.UNINITIALIZED.value);
        assertEquals(1, ActionType.UNKNOWN.value);
        assertEquals(40, ActionType.BUILD_PIECE.value);  // BUILD_PIECE mentioned in .value javadoc

        assertEquals(ActionType.UNINITIALIZED, ActionType.valueOf(0));
        assertEquals(ActionType.UNKNOWN, ActionType.valueOf(1));
        assertEquals(ActionType.BUILD_PIECE, ActionType.valueOf(40));
        assertNull(ActionType.valueOf(-1));

        // for completeness, test autogenerated valueOf(String)
        assertEquals(ActionType.UNINITIALIZED, ActionType.valueOf("UNINITIALIZED"));
        assertEquals(ActionType.UNKNOWN, ActionType.valueOf("UNKNOWN"));
        assertEquals(ActionType.BUILD_PIECE, ActionType.valueOf("BUILD_PIECE"));
        try
        {
            ActionType.valueOf("NOT_A_DECLARED_CONSTANT");
            fail("ActionType.valueOf(\"??\") should have thrown IllegalArgumentException");
        } catch (IllegalArgumentException e) {}

        final HashMap<Integer, ActionType> typeValues = new HashMap<>();
        for (ActionType t : ActionType.values())
        {
            final Integer ival = Integer.valueOf(t.value);
            ActionType entry = typeValues.get(ival);
            if (entry != null)
                fail("ActionType: dupe value " + ival + " for " + t + " and " + entry);
            else
                typeValues.put(ival, t);
        }
    }

    /**
     * Test basic extractor read methods {@code next()}, {@code backtrackTo(...)}, {@code nextIfType()},
     * {@code resetCurrentSequence()}, and {@link ExtractorState#equals(Object)}.
     * @see #testBasicsNextIfGameStateOrOver()
     */
    @Test
    public void testBasicsReadEvents()
        throws ParseException
    {
        final List<EventEntry> events = eventLog.entries;

        // check contents from makeEmptyEventLog() ran through GameActionExtractor constructor
        assertEquals(4, EMPTYEVENTLOG_SIZE_TO_STARTGAME);
        assertEquals(4, events.size());
        assertEquals(1, actLog.size());
        assertEquals(ActionType.LOG_START_TO_STARTGAME, actLog.get(0).actType);
        assertEquals(4, actLog.get(0).eventSequence.size());
        assertEquals(EMPTYEVENTLOG_STARTGAME_GAME_STATE, actLog.get(0).endingGameState);
        assertEquals(-1, state.currentPlayerNumber);
        assertEquals(EMPTYEVENTLOG_STARTGAME_GAME_STATE, state.currentGameState);  // was read in next() from SOCStartGame
        assertEquals("at end of event log so far", events.size(), state.nextLogIndex);
        assertEquals(4, currentSequenceStartIndex);
        assertEquals(0, currentSequence.size());
        assertNull(next());  // at end of log

        // ExtractorState basic tests
        ExtractorState prevState = new ExtractorState(state);
        assertEquals(EMPTYEVENTLOG_STARTGAME_GAME_STATE, prevState.currentGameState);
        assertEquals(currentSequence.size(), prevState.currentSequenceSize);
        assertEquals(state.nextLogIndex, prevState.nextLogIndex);
        assertEquals(-1, state.currentSequenceSize);
        prevState.currentSequenceSize = -1;
        assertEquals(state, prevState);
        assertEquals(state.toString(), prevState.toString());
        prevState.nextLogIndex = -1;
        assertNotEquals(state, prevState);

        // add a few entries
        events.add(new EventEntry(new SOCGameState("test", SOCGame.START1B), -1, false, -1));
        events.add(new EventEntry("next() ignores comments"));
        events.add(new EventEntry(new SOCPutPiece("test", 3, SOCPlayingPiece.SETTLEMENT, 11), -1, false, -1));
        events.add(new EventEntry(new SOCGameServerText("test", "should ignore during next()"), -1, false, -1));
        events.add(new EventEntry(new SOCTurn("test", 3, SOCGame.ROLL_OR_CARD), -1, false, -1));

        // read through those:

        // gamestate(START1B):
        EventEntry e = next();
        assertNotNull(e);
        assertTrue(e.event instanceof SOCGameState);
        assertEquals(1, currentSequence.size());
        assertEquals(SOCGame.START1B, state.currentGameState);
        assertTrue(currentSequence.get(0).event instanceof SOCGameState);
        assertEquals(5, state.nextLogIndex);

        // test ExtractorState after that next()
        assertNotEquals(state, prevState);
        prevState.snapshotFrom(state);
        assertEquals(-1, state.currentSequenceSize);
        state.currentSequenceSize = currentSequence.size();  // for sake of equals()
        assertEquals(state, prevState);
        state.currentSequenceSize = -1;

        // comment, SOCPutPiece:
        e = next();
        assertNotNull(e);
        assertTrue(e.event instanceof SOCPutPiece);
        assertEquals(3, currentSequence.size());
        assertTrue(currentSequence.get(1).comment.equals("next() ignores comments"));
        assertTrue(currentSequence.get(2).event instanceof SOCPutPiece);
        assertEquals(7, state.nextLogIndex);

        // save state to read and backtrack
        prevState.snapshotFrom(state);
        assertEquals(SOCGame.START1B, prevState.currentGameState);
        assertEquals(currentSequence.size(), prevState.currentSequenceSize);
        assertEquals(state.nextLogIndex, prevState.nextLogIndex);

        // gameservertext, SOCTurn: Test next, backtrack, next
        for (int i = 0; i <= 1; ++i)
        {
            e = next();
            assertNotNull(e);
            assertTrue(e.event instanceof SOCTurn);
            assertEquals(5, currentSequence.size());
            assertTrue(currentSequence.get(3).event instanceof SOCGameServerText);
            assertTrue(currentSequence.get(4).event instanceof SOCTurn);
            assertEquals(9, state.nextLogIndex);
            assertEquals(3, state.currentPlayerNumber);
            assertEquals(SOCGame.ROLL_OR_CARD, state.currentGameState);

            if (i == 0)
            {
                backtrackTo(prevState);

                assertEquals(3, currentSequence.size());
                assertEquals(7, state.nextLogIndex);
                assertEquals(-1, state.currentPlayerNumber);
                assertEquals(SOCGame.START1B, state.currentGameState);
            }
        }

        assertTrue("at end of event log so far", state.nextLogIndex == events.size());

        // add another entry, test nextIfType:

        events.add(new EventEntry(new SOCRollDiceRequest("test"), -1, false, -1));

        e = nextIfType(SOCMessage.BANKTRADE);
        assertNull(e);
        assertEquals(9, state.nextLogIndex);

        e = nextIfType(SOCMessage.ROLLDICEREQUEST);
        assertNotNull(e);
        assertTrue(e.event instanceof SOCRollDiceRequest);
        assertEquals(6, currentSequence.size());
        assertTrue(currentSequence.get(5).event instanceof SOCRollDiceRequest);
        assertEquals(10, state.nextLogIndex);

        // resetCurrentSequence
        List<EventEntry> seq = resetCurrentSequence();
        assertEquals(6, seq.size());
        assertEquals(0, currentSequence.size());
        assertEquals(10, currentSequenceStartIndex);
        assertEquals(10, state.nextLogIndex);
    }

    /**
     * Basic tests for {@link GameActionExtractor#nextIfGamestateOrOver()},
     * which is used by extractors tested in {@link #testGameOver()}.
     */
    @Test
    public void testBasicsNextIfGameStateOrOver()
    {
        final List<EventEntry> events = eventLog.entries;

        // check contents from makeEmptyEventLog() ran through GameActionExtractor constructor
        assertEquals(4, EMPTYEVENTLOG_SIZE_TO_STARTGAME);
        assertEquals(4, events.size());
        assertEquals(1, actLog.size());
        assertEquals(ActionType.LOG_START_TO_STARTGAME, actLog.get(0).actType);
        assertEquals(4, actLog.get(0).eventSequence.size());
        assertEquals(-1, state.currentPlayerNumber);
        assertEquals(EMPTYEVENTLOG_STARTGAME_GAME_STATE, state.currentGameState);  // was read in next() from SOCStartGame
        assertEquals("at end of event log so far", events.size(), state.nextLogIndex);
        assertEquals(4, currentSequenceStartIndex);
        assertEquals(0, currentSequence.size());
        assertNull(next());  // at end of log

        assertNull(nextIfGamestateOrOver());

        // Recognize typical gamestate

        events.add(new EventEntry(new SOCGameState("test", SOCGame.PLAY1), -1, false, -1));
        EventEntry e = nextIfGamestateOrOver();
        assertNotNull(e);
        assertTrue(e.event instanceof SOCGameState);
        assertEquals(1, currentSequence.size());
        assertEquals(SOCGame.PLAY1, state.currentGameState);

        final int currentEvSize = events.size();
        assertEquals("at end of event log", currentEvSize, state.nextLogIndex);

        // Negative tests: if isn't the expected sequence, return null and backtrack

        // not the expected GameElement
        events.add(new EventEntry(new SOCPutPiece("test", 3, SOCPlayingPiece.SETTLEMENT, 11), -1, false, -1));
        assertNull(nextIfGamestateOrOver());
        assertEquals(1, currentSequence.size());
        assertEquals(SOCGame.PLAY1, state.currentGameState);
        assertEquals(currentEvSize, state.nextLogIndex);
        events.remove(currentEvSize);

        // gameelement + another gamestate(not OVER)
        events.add(new EventEntry(new SOCGameElements("test", SOCGameElements.GEType.CURRENT_PLAYER, 5), -1, false, -1));
        events.add(new EventEntry(new SOCGameState("test", SOCGame.ROLL_OR_CARD), -1, false, -1));
        assertNull(nextIfGamestateOrOver());
        assertEquals(1, currentSequence.size());
        assertEquals(SOCGame.PLAY1, state.currentGameState);  // not ROLL_OR_CARD
        assertEquals(currentEvSize, state.nextLogIndex);
        events.remove(currentEvSize + 1);
        events.remove(currentEvSize);

        // gameelement + end of log
        events.add(new EventEntry(new SOCGameElements("test", SOCGameElements.GEType.CURRENT_PLAYER, 5), -1, false, -1));
        assertNull(nextIfGamestateOrOver());
        assertEquals(1, currentSequence.size());
        assertEquals(SOCGame.PLAY1, state.currentGameState);
        assertEquals(currentEvSize, state.nextLogIndex);
        events.remove(currentEvSize);

        // gameelement + non-gamestate message
        events.add(new EventEntry(new SOCGameElements("test", SOCGameElements.GEType.CURRENT_PLAYER, 5), -1, false, -1));
        events.add(new EventEntry(new SOCPutPiece("test", 3, SOCPlayingPiece.SETTLEMENT, 11), -1, false, -1));
        assertNull(nextIfGamestateOrOver());
        assertEquals(1, currentSequence.size());
        assertEquals(SOCGame.PLAY1, state.currentGameState);
        assertEquals(currentEvSize, state.nextLogIndex);
        events.remove(currentEvSize + 1);
        events.remove(currentEvSize);

        // Recognize SOCPlayerElement + gstate(OVER)

        assertEquals(-1, state.currentPlayerNumber);
        events.add(new EventEntry(new SOCGameElements("test", SOCGameElements.GEType.CURRENT_PLAYER, 5), -1, false, -1));
        events.add(new EventEntry(new SOCGameState("test", SOCGame.OVER), -1, false, -1));
        e = nextIfGamestateOrOver();
        assertNotNull(e);
        assertTrue(e.event instanceof SOCGameState);
        assertEquals(3, currentSequence.size());
        assertTrue(currentSequence.get(1).event instanceof SOCGameElements);
        assertTrue(currentSequence.get(2).event instanceof SOCGameState);
        assertEquals(SOCGame.OVER, state.currentGameState);
        assertEquals(5, state.currentPlayerNumber);
    }

    /**
     * Parse event log entries and add them, after some
     * sanity checks of current event log and {@link #actLog} status
     * which assume {@code events} was initialized with {@link #makeEmptyEventLog()}.
     * If sanity checks or parsing fails, will {@code fail(..)} various asserts
     * to end the current test.
     *
     * @param events  Event log to add from, like {@link #eventLog}; not null
     * @param toAdd  Events to add; will call {@link EventEntry#parse(String)} on each
     */
    protected void addEventLogEntries(final List<EventEntry> events, final String[] toAdd)
    {
        // check contents from makeEmptyEventLog() ran through GameActionExtractor constructor
        assertEquals(EMPTYEVENTLOG_SIZE_TO_STARTGAME, events.size());
        assertEquals(1, actLog.size());
        assertEquals(ActionType.LOG_START_TO_STARTGAME, actLog.get(0).actType);
        assertEquals(EMPTYEVENTLOG_SIZE_TO_STARTGAME, actLog.get(0).eventSequence.size());
        assertEquals(-1, state.currentPlayerNumber);
        assertEquals(EMPTYEVENTLOG_STARTGAME_GAME_STATE, state.currentGameState);  // was read in next() from SOCStartGame
        assertEquals("at end of event log so far", events.size(), state.nextLogIndex);
        assertEquals(EMPTYEVENTLOG_SIZE_TO_STARTGAME, currentSequenceStartIndex);
        assertEquals(0, currentSequence.size());
        assertNull(next());  // at end of log

        for (String event : toAdd)
            try {
                events.add(EventEntry.parse(event));
            } catch (ParseException e) {
                fail("Internal error: ParseException for \"" + event + "\": " + e.getMessage());
            }
    }

    /**
     * Test recovering from an unknown sequence, recognizing the actions after it.
     */
    @Test
    public void testUnknownSequenceRecovery()
    {
        testExtractEventSequence(new String[]
            {
                // start of turn:
                "all:SOCTurn:game=test|playerNumber=3|gameState=15",
                "all:SOCRollDicePrompt:game=test|playerNumber=3",

                // roll dice:
                "f3:SOCRollDice:game=test",
                "all:SOCDiceResult:game=test|param=8",
                "all:SOCDiceResultResources:game=test|p=1|p=3|p=8|p=1|p=1",
                "p3:SOCPlayerElements:game=test|playerNum=3|actionType=SET|e1=1,e2=2,e3=1,e4=3,e5=1",
                "all:SOCGameState:game=test|state=20",

                // build piece starting with buildrequest:
                "f3:SOCBuildRequest:game=test|pieceType=3",
                "all:SOCPlayerElements:game=test|playerNum=3|actionType=LOSE|e3=1,e5=1",
                "all:SOCGameState:game=test|state=35",
                "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=602",
                "all:SOCGameServerText:game=test|text=p3 built a ship.",
                "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=602",
                "all:SOCGameState:game=test|state=20",

                // the unknown sequence (middle section of play dev card):
                "f3:SOCPickResourceType:game=test|resType=3",
                "all:SOCPlayerElement:game=test|playerNum=2|actionType=SET|elementType=3|amount=0|news=Y",
                "all:SOCResourceCount:game=test|playerNum=2|count=2",

                // buy dev card:
                "f3:SOCBuyDevCardRequest:game=test",
                "all:SOCPlayerElements:game=test|playerNum=3|actionType=LOSE|e2=1,e3=1,e4=1",
                "p3:SOCDevCardAction:game=test|playerNum=3|actionType=DRAW|cardType=9",
                "!p3:SOCDevCardAction:game=test|playerNum=3|actionType=DRAW|cardType=0",
                "all:SOCSimpleAction:game=test|pn=3|actType=1|v1=15|v2=0",
                "all:SOCGameState:game=test|state=20",

                // end turn:
                "f3:SOCEndTurn:game=test",
                "all:SOCClearOffer:game=test|playerNumber=-1",
            },
            3, 99,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, 7, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc,
                        (toClientPN == -1) ? 5 : ((toClientPN == 3) ? 4 : 3),
                        act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 8, act.param1);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 7 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " built ship", SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc + " built at 0x602", 0x602, act.param2);
                    assertEquals(desc + " built by player 3", 3, act.param3);
                    assertNull(desc + " no fog hex revealed", act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(4);
                    assertEquals(desc, ActionType.UNKNOWN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);

                    act = actionLog.get(5);
                    assertEquals(desc, ActionType.BUY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dev card type",
                        (toClientPN != 99) ? SOCDevCardConstants.KNIGHT : 0, act.param1);
                    assertEquals(desc + " remaining cards", 15, act.param2);

                    act = actionLog.get(6);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                }
            });
    }

    /**
     * Test extraction of basic initial placement with 3 players: p3 (first player), p0, and p1.
     *<P>
     * Initial placement with a settlement canceled/re-placed is tested in {@link #testInitialPlacementCancelSettlement()}
     * and (from soclog file) {@link #testLoadAndExtractInitialPlacement()}.
     * Initial placement with gold hexes and revealed fog hexes is tested in {@link #testGoldHexFogHex()}.
     */
    @Test
    public void testInitialPlacement()
    {
        testExtractEventSequence(new String[]
            {
            // start of 1st initial placements (right after SOCStartGame):

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=3|gameState=5",

            "f0:SOCChangeFace:game=test|playerNumber=0|faceId=-1",
            "all:SOCChangeFace:game=test|playerNumber=0|faceId=-1",
            "f1:SOCChangeFace:game=test|playerNumber=1|faceId=-1",
            "all:SOCChangeFace:game=test|playerNumber=1|faceId=-1",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=34",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=34",
            "all:SOCGameState:game=test|state=6",

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a road.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=34",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=34",

            "all:SOCGameServerText:game=test|text=It's p0's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=0|gameState=5",

            "f0:SOCPutPiece:game=test|playerNumber=0|pieceType=1|coord=c9",
            "all:SOCGameServerText:game=test|text=p0 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=0|pieceType=1|coord=c9",
            "all:SOCGameState:game=test|state=6",

            "all:SOCGameServerText:game=test|text=It's p0's turn to build a road.",
            "f0:SOCPutPiece:game=test|playerNumber=0|pieceType=0|coord=b8",
            "all:SOCGameServerText:game=test|text=p0 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=0|pieceType=0|coord=b8",

            "all:SOCGameServerText:game=test|text=It's p1's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=1|gameState=5",

            "f1:SOCPutPiece:game=test|playerNumber=1|pieceType=1|coord=87",
            "all:SOCGameServerText:game=test|text=p1 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=1|pieceType=1|coord=87",
            "all:SOCGameState:game=test|state=6",

            "all:SOCGameServerText:game=test|text=It's p1's turn to build a road.",
            "f1:SOCPutPiece:game=test|playerNumber=1|pieceType=0|coord=87",
            "all:SOCGameServerText:game=test|text=p1 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=1|pieceType=0|coord=87",

            // start of 2nd initial placements:

            "all:SOCGameServerText:game=test|text=It's p1's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=1|gameState=10",

            "f1:SOCPutPiece:game=test|playerNumber=1|pieceType=1|coord=43",
            "all:SOCGameServerText:game=test|text=p1 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=1|pieceType=1|coord=43",
            "all:SOCGameState:game=test|state=11",

            "all:SOCGameServerText:game=test|text=It's p1's turn to build a road.",
            "f1:SOCPutPiece:game=test|playerNumber=1|pieceType=0|coord=43",
            "all:SOCGameServerText:game=test|text=p1 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=1|pieceType=0|coord=43",

            "all:SOCGameServerText:game=test|text=It's p0's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=0|gameState=10",

            "f0:SOCPutPiece:game=test|playerNumber=0|pieceType=1|coord=ba",
            "all:SOCGameServerText:game=test|text=p0 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=0|pieceType=1|coord=ba",
            "all:SOCGameState:game=test|state=11",

            "all:SOCGameServerText:game=test|text=It's p0's turn to build a road.",
            "f0:SOCPutPiece:game=test|playerNumber=0|pieceType=0|coord=ba",
            "all:SOCGameServerText:game=test|text=p0 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=0|pieceType=0|coord=ba",

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=3|gameState=10",

            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=b6",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=b6",
            "all:SOCGameState:game=test|state=11",

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a road.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=a6",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=a6",

            // start of first player's first turn:
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            // roll dice:
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=8",
            "all:SOCDiceResultResources:game=test|p=1|p=3|p=8|p=1|p=1",
            "p3:SOCPlayerElements:game=test|playerNum=3|actionType=SET|e1=1,e2=2,e3=1,e4=3,e5=1",
            "all:SOCGameState:game=test|state=20",
            },
            3, 99,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, 21, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    // Start of 1st initial placements

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1A, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 8 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x34", 0x34, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertNull(desc + " no fog hex revealed", act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                    assertEquals(desc + " built at 0x34", 0x34, act.param2);
                    assertEquals(desc, 3, act.param3);

                    act = actionLog.get(4);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1A, act.endingGameState);
                    assertEquals(desc, 0, act.param1);

                    act = actionLog.get(5);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0xc9", 0xc9, act.param2);
                    assertEquals(desc, 0, act.param3);

                    act = actionLog.get(6);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                    assertEquals(desc + " built at 0xb8", 0xb8, act.param2);
                    assertEquals(desc, 0, act.param3);

                    act = actionLog.get(7);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1A, act.endingGameState);
                    assertEquals(desc, 1, act.param1);

                    act = actionLog.get(8);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x87", 0x87, act.param2);
                    assertEquals(desc, 1, act.param3);

                    act = actionLog.get(9);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                    assertEquals(desc + " built at 0x87", 0x87, act.param2);
                    assertEquals(desc, 1, act.param3);

                    // Start of 2nd initial placements

                    act = actionLog.get(10);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2A, act.endingGameState);
                    assertEquals(desc, 1, act.param1);

                    act = actionLog.get(11);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x43", 0x43, act.param2);
                    assertEquals(desc, 1, act.param3);

                    act = actionLog.get(12);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                    assertEquals(desc + " built at 0x43", 0x43, act.param2);
                    assertEquals(desc, 1, act.param3);

                    act = actionLog.get(13);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2A, act.endingGameState);
                    assertEquals(desc, 0, act.param1);

                    act = actionLog.get(14);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0xba", 0xba, act.param2);
                    assertEquals(desc, 0, act.param3);

                    act = actionLog.get(15);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                    assertEquals(desc + " built at 0xba", 0xba, act.param2);
                    assertEquals(desc, 0, act.param3);

                    act = actionLog.get(16);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2A, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(17);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0xb6", 0xb6, act.param2);
                    assertEquals(desc, 3, act.param3);

                    act = actionLog.get(18);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                    assertEquals(desc + " built at 0xa6", 0xa6, act.param2);
                    assertEquals(desc, 3, act.param3);

                    // First round of regular gameplay

                    act = actionLog.get(19);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(20);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : ((toClientPN == 3) ? 4 : 3), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 8, act.param1);
                }
            });
    }

    /**
     * Test initial placement with a settlement canceled/re-placed.
     * @see #testInitialPlacement()
     * @see #testLoadAndExtractInitialPlacement()
     */
    @Test
    public void testInitialPlacementCancelSettlement()
    {
        testExtractEventSequence(new String[]
            {
                "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",
                "all:SOCTurn:game=test|playerNumber=3|gameState=10",

                "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=58",
                "all:SOCGameServerText:game=test|text=p3 built a settlement.",
                "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=58",
                "all:SOCGameState:game=test|state=11",
                "all:SOCGameServerText:game=test|text=It's p3's turn to build a road.",

                "f3:SOCCancelBuildRequest:game=test|pieceType=1",
                "all:SOCCancelBuildRequest:game=test|pieceType=1",
                "all:SOCGameServerText:game=test|text=p3 cancelled this settlement placement.",
                "all:SOCGameState:game=test|state=10",
                "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",

                "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=74",
                "all:SOCGameServerText:game=test|text=p3 built a settlement.",
                "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=74",
                "all:SOCGameState:game=test|state=11",
                "all:SOCGameServerText:game=test|text=It's p3's turn to build a road."
            },
            3, 99,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, 5, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    // Start of 2nd initial placements

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2A, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x58", 0x58, act.param2);
                    assertEquals(desc, 3, act.param3);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.CANCEL_BUILT_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2A, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(0, act.param2);
                    assertEquals(desc, 3, act.param3);

                    act = actionLog.get(4);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x74", 0x74, act.param2);
                    assertEquals(desc, 3, act.param3);
                }
            });
    }

    /**
     * Test loading from soclog file and extracting initial placement with a settlement canceled/re-placed,
     * with 3 players (p3 droid 1 (first player), p5, and p1 robot 4). on sea board
     * from the known-good {@code initial-placement-sea-cancel.soclog} artifact.
     * @see #testInitialPlacementCancelSettlement()
     * @see TestGameEventLog#testLoadWithAtClient()
     */
    @Test
    public void testLoadAndExtractInitialPlacement()
        throws NoSuchElementException, IOException, ParseException
    {
        // Load and spot-check before extraction:

        final GameEventLog log = TestGameEventLog.load("initial-placement-sea-cancel.soclog", false, -1);
        final int EXPECTED_FILE_LINE_COUNT = 223;  // length from wc -l

        assertNotNull(log);
        assertEquals("test", log.gameName);
        assertFalse(log.isAtClient);
        assertEquals(-1, log.atClientPN);
        assertEquals(2500, log.version);
        assertEquals("BC=t4,PLB=t,SBL=t,N7=f7,RD=f,PL=6", log.optsStr);
        assertFalse(log.entries.isEmpty());
        assertEquals(EXPECTED_FILE_LINE_COUNT, log.numLines);
        assertEquals(log.numLines, 1 + log.entries.size());  // true if no blank lines

        // f5:SOCPutPiece:game=test|playerNumber=5|pieceType=3|coord=704
        EventEntry entry = log.entries.get(133);
        SOCMessage msg = entry.event;
        assertTrue(entry.isFromClient);
        assertEquals(5, entry.pn);
        assertNull(entry.excludedPN);
        assertTrue
            ("Line 135 expected SOCPutPiece, got " + ((msg != null) ? msg.getClass().getSimpleName() : "null"),
             msg instanceof SOCPutPiece);
        assertEquals("test", ((SOCPutPiece) msg).getGame());
        assertEquals(3, ((SOCPutPiece) msg).getPieceType());
        assertEquals(0x704, ((SOCPutPiece) msg).getCoordinates());

        // all:SOCCancelBuildRequest:game=test|pieceType=1
        entry = log.entries.get(166);
        msg = entry.event;
        assertFalse(entry.isFromClient);
        assertEquals(-1, entry.pn);
        assertNull(entry.excludedPN);
        assertTrue("Line 168 expected SOCCancelBuildRequest, got " + ((msg != null) ? msg.getClass().getSimpleName() : "null"),
            msg instanceof SOCCancelBuildRequest);
        assertEquals(1, ((SOCCancelBuildRequest) msg).getPieceType());

        // Test extraction:

        final ExtractResultsChecker checker = new ExtractResultsChecker()
        {
            public void check(final GameActionLog actionLog, final int toClientPN)
            {
                final String desc = "for clientPN=" + toClientPN + ":";

                assertEquals(desc, 27, actionLog.size());

                GameActionLog.Action act = actionLog.get(0);
                assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 112 : ((toClientPN == 5) ? 36 : 35), act.eventSequence.size());
                assertEquals(desc, SOCGame.START1A, act.endingGameState);

                // Start of 1st initial placements

                act = actionLog.get(1);
                assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                assertEquals(desc, 2, act.eventSequence.size());
                assertEquals(desc, SOCGame.START1A, act.endingGameState);
                assertEquals(desc + " new current player number", 3, act.param1);

                act = actionLog.get(2);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 8 : 5, act.eventSequence.size());
                assertEquals(desc, SOCGame.START1B, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                assertEquals(desc + " built at 0x60b", 0x60b, act.param2);
                assertEquals(desc, 3, act.param3);

                act = actionLog.get(3);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                assertEquals(desc, SOCGame.START1B, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                assertEquals(desc + " built at 0x60b", 0x60b, act.param2);
                assertEquals(desc, 3, act.param3);

                act = actionLog.get(4);
                assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                assertEquals(desc, 2, act.eventSequence.size());
                assertEquals(desc, SOCGame.START1A, act.endingGameState);
                assertEquals(desc, 5, act.param1);

                act = actionLog.get(5);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                assertEquals(desc, SOCGame.START1B, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                assertEquals(desc + " built at 0x804", 0x804, act.param2);
                assertEquals(desc, 5, act.param3);

                act = actionLog.get(6);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                assertEquals(desc, SOCGame.START1B, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.SHIP, act.param1);
                assertEquals(desc + " built at 0x704", 0x704, act.param2);
                assertEquals(desc, 5, act.param3);

                act = actionLog.get(7);
                assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                assertEquals(desc, 2, act.eventSequence.size());
                assertEquals(desc, SOCGame.START1A, act.endingGameState);
                assertEquals(desc, 1, act.param1);

                act = actionLog.get(8);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                assertEquals(desc, SOCGame.START1B, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                assertEquals(desc + " built at 0xa0b", 0xa0b, act.param2);
                assertEquals(desc, 1, act.param3);

                act = actionLog.get(9);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                assertEquals(desc, SOCGame.START1B, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                assertEquals(desc + " built at 0x90b", 0x90b, act.param2);
                assertEquals(desc, 1, act.param3);

                // Start of 2nd initial placements

                act = actionLog.get(10);
                assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                assertEquals(desc, 2, act.eventSequence.size());
                assertEquals(desc, SOCGame.START2A, act.endingGameState);
                assertEquals(desc, 1, act.param1);

                act = actionLog.get(11);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                assertEquals(desc, SOCGame.START2B, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                assertEquals(desc + " built at 0x40a", 0x40a, act.param2);
                assertEquals(desc, 1, act.param3);

                act = actionLog.get(12);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                assertEquals(desc, SOCGame.START2B, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                assertEquals(desc + " built at 0x30a", 0x30a, act.param2);
                assertEquals(desc, 1, act.param3);

                act = actionLog.get(13);
                assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                assertEquals(desc, 2, act.eventSequence.size());
                assertEquals(desc, SOCGame.START2A, act.endingGameState);
                assertEquals(desc, 5, act.param1);

                act = actionLog.get(14);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                assertEquals(desc, SOCGame.START2B, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                assertEquals(desc + " built at 0x80d", 0x80d, act.param2);
                assertEquals(desc, 5, act.param3);

                act = actionLog.get(15);
                assertEquals(desc, ActionType.CANCEL_BUILT_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 7 : 5, act.eventSequence.size());
                assertEquals(desc, SOCGame.START2A, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                assertEquals(0, act.param2);
                assertEquals(desc, 5, act.param3);

                act = actionLog.get(16);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 7 : 5, act.eventSequence.size());
                assertEquals(desc, SOCGame.START2B, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                assertEquals(desc + " built at 0xa06", 0xa06, act.param2);
                assertEquals(desc, 5, act.param3);

                act = actionLog.get(17);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                assertEquals(desc, SOCGame.START2B, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                assertEquals(desc + " built at 0xa05", 0xa05, act.param2);
                assertEquals(desc, 5, act.param3);

                act = actionLog.get(18);
                assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                assertEquals(desc, 2, act.eventSequence.size());
                assertEquals(desc, SOCGame.START2A, act.endingGameState);
                assertEquals(desc, 3, act.param1);

                // p3 init settle at 0xc0c, reveals fog hex
                act = actionLog.get(19);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 8 : 6, act.eventSequence.size());
                assertEquals(desc, SOCGame.STARTS_WAITING_FOR_PICK_GOLD_RESOURCE, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                assertEquals(desc + " built at 0xc0c", 0xc0c, act.param2);
                assertEquals(desc, 3, act.param3);

                act = actionLog.get(20);
                assertEquals(desc, ActionType.CHOOSE_FREE_RESOURCES, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                assertEquals(desc, SOCGame.START2B, act.endingGameState);
                assertEquals(desc, new SOCResourceSet(0, 0, 0, 1, 0, 0), act.rset1);

                act = actionLog.get(21);
                assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                assertEquals(desc, SOCGame.START2B, act.endingGameState);
                assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                assertEquals(desc + " built at 0xb0c", 0xb0c, act.param2);
                assertEquals(desc, 3, act.param3);

                // First regular turn

                act = actionLog.get(22);
                assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                assertEquals(desc, 2, act.eventSequence.size());
                assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                assertEquals(desc, 3, act.param1);

                act = actionLog.get(23);
                assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 6 : 3, act.eventSequence.size());
                assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                assertEquals(desc + " dice roll sum", 9, act.param1);

                act = actionLog.get(24);
                assertEquals(desc, ActionType.END_TURN, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                assertEquals(desc, SOCGame.PLAY1, act.endingGameState);

                act = actionLog.get(25);
                assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                assertEquals(desc, 2, act.eventSequence.size());
                assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                assertEquals(desc, 5, act.param1);

                act = actionLog.get(26);
                assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                assertEquals(desc, (toClientPN == -1) ? 12 : 8, act.eventSequence.size());
                assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                assertEquals(desc + " dice roll sum", 9, act.param1);
            }
        };

        // for server
        {
            final GameEventLog fullLog = new GameEventLog(log, -1);
            GameActionExtractor ext = new GameActionExtractor(fullLog, true);
            GameActionLog actionLog = ext.extract();
            assertNotNull(actionLog);
            checker.check(actionLog, -1);
        }

        // for clientPN
        {
            final int testToClientPN = 5;
            final GameEventLog clientEventLog = new GameEventLog(log, testToClientPN);
            assertEquals(testToClientPN, clientEventLog.atClientPN);
            GameActionExtractor ext = new GameActionExtractor(clientEventLog, true);
            GameActionLog clientActLog = ext.extract();
            assertNotNull(clientActLog);
            checker.check(clientActLog, testToClientPN);
        }

        // for otherPN (observer)
        {
            final int testToOtherPN = 99;
            final GameEventLog clientEventLog = new GameEventLog(log, testToOtherPN);
            assertEquals(testToOtherPN, clientEventLog.atClientPN);
            GameActionExtractor ext = new GameActionExtractor(clientEventLog, true);
            GameActionLog clientActLog = ext.extract();
            assertNotNull(clientActLog);
            checker.check(clientActLog, testToOtherPN);
        }
    }

    /**
     * Test extraction of a turn where pieces are built and a ship moved:
     * {@link ActionType#TURN_BEGINS}, {@link ActionType#ROLL_DICE} with gains,
     * {@link ActionType#BUILD_PIECE}, {@link ActionType#MOVE_PIECE}, {@link ActionType#END_TURN}.
     * Sequences based on {@code all-basic-actions.soclog}.
     *<P>
     * An uncommon roll dice sequence is tested in {@link #testRollGainCloth()}.
     * Some uncommon build piece sequences are also tested in {@link #testGoldHexFogHex()}.
     */
    @Test
    public void testTurnWithBuilding()
    {
        testExtractEventSequence(new String[]
            {
            // start of turn:
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            // roll dice:
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=8",
            "all:SOCDiceResultResources:game=test|p=1|p=3|p=8|p=1|p=1",
            "p3:SOCPlayerElements:game=test|playerNum=3|actionType=SET|e1=1,e2=2,e3=1,e4=3,e5=1",
            "all:SOCGameState:game=test|state=20",

            // build piece starting with buildrequest:
            "f3:SOCBuildRequest:game=test|pieceType=3",
            "all:SOCPlayerElements:game=test|playerNum=3|actionType=LOSE|e3=1,e5=1",
            "all:SOCGameState:game=test|state=35",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=602",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=602",
            "all:SOCGameState:game=test|state=20",

            // build piece starting with putpiece:
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=804",
            "all:SOCPlayerElements:game=test|playerNum=3|actionType=LOSE|e1=1,e3=1,e4=1,e5=1",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=804",
            "all:SOCGameState:game=test|state=20",

            // move piece (ship):
            "f3:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=602|toCoord=503",
            "all:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=602|toCoord=503",

            // move ship and gain longest route (actual game rules don't allow 2 moves/turn):
            "f3:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=402|toCoord=b02",
            "all:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=402|toCoord=b02",
            "all:SOCGameElements:game=test|e6=3",

            // end turn:
            "f3:SOCEndTurn:game=test",
            "all:SOCClearOffer:game=test|playerNumber=-1",
            },
            3, 99,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, 8, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc,
                        (toClientPN == -1) ? 5 : ((toClientPN == 3) ? 4 : 3),
                        act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 8, act.param1);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 7 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " built ship", SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc + " built at 0x602", 0x602, act.param2);
                    assertEquals(desc + " built by player 3", 3, act.param3);

                    act = actionLog.get(4);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " built settlement", SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x804", 0x804, act.param2);
                    assertEquals(desc + " built by player 3", 3, act.param3);

                    act = actionLog.get(5);
                    assertEquals(desc, ActionType.MOVE_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " moved a ship", SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc + " moved from", 0x602, act.param2);
                    assertEquals(desc + " moved to", 0x503, act.param3);

                    act = actionLog.get(6);
                    assertEquals(desc, ActionType.MOVE_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " moved a ship", SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc + " moved from", 0x402, act.param2);
                    assertEquals(desc + " moved to", 0xb02, act.param3);

                    act = actionLog.get(7);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                }
            });
    }

    /**
     * Test extraction of asking and playing the Special Building Phase (SBP):
     * {@link ActionType#ASK_SPECIAL_BUILDING}, {@link ActionType#END_TURN},
     * {@link ActionType#TURN_BEGINS} for SBP, etc.
     */
    @Test
    public void testSpecialBuildingPhase()
    {
        testExtractEventSequence(new String[]
            {
            // start of p3's turn:
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            // roll dice:
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=12",
            "all:SOCGameState:game=test|state=20",

            // p1 asks for SBP:
            "f1:SOCBuildRequest:game=test|pieceType=-1",
            "all:SOCPlayerElement:game=test|playerNum=1|actionType=SET|elementType=16|amount=1",

            // p4 asks for SBP:
            "f4:SOCBuildRequest:game=test|pieceType=0",
            "all:SOCPlayerElement:game=test|playerNum=4|actionType=SET|elementType=16|amount=1",

            // end p3's normal turn:
            "f3:SOCEndTurn:game=test",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            // start of SBP: p4's turn:
            "all:SOCTurn:game=test|playerNumber=4|gameState=100",

            // buy dev card:
            "f4:SOCBuyDevCardRequest:game=test",
            "all:SOCPlayerElements:game=test|playerNum=4|actionType=LOSE|e2=1,e3=1,e4=1",
            "p4:SOCDevCardAction:game=test|playerNum=4|actionType=DRAW|cardType=9",
            "!p4:SOCDevCardAction:game=test|playerNum=4|actionType=DRAW|cardType=0",
            "all:SOCSimpleAction:game=test|pn=4|actType=1|v1=32|v2=0",
            "all:SOCGameState:game=test|state=100",

            // buy & place a road, starting with putpiece:
            "f4:SOCPutPiece:game=test|playerNumber=4|pieceType=0|coord=76",
            "all:SOCPlayerElements:game=test|playerNum=4|actionType=LOSE|e1=1,e5=1",
            "all:SOCGameServerText:game=test|text=p4 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=4|pieceType=0|coord=76",
            "all:SOCGameState:game=test|state=100",

            // end p4's SBP:
            "f4:SOCEndTurn:game=test",
            "all:SOCPlayerElement:game=test|playerNum=4|actionType=SET|elementType=16|amount=0",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            // start of p1's SBP:
            "all:SOCTurn:game=test|playerNumber=1|gameState=100",

            // buy & place a road, starting with buildrequest:
            "f1:SOCBuildRequest:game=test|pieceType=0",
            "all:SOCPlayerElements:game=test|playerNum=1|actionType=LOSE|e1=1,e5=1",
            "all:SOCGameState:game=test|state=30",
            "f1:SOCPutPiece:game=test|playerNumber=1|pieceType=0|coord=a8",
            "all:SOCGameServerText:game=test|text=p1 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=1|pieceType=0|coord=a8",
            "all:SOCGameState:game=test|state=100",

            // end p1's SBP:
            "f1:SOCEndTurn:game=test",
            "all:SOCPlayerElement:game=test|playerNum=1|actionType=SET|elementType=16|amount=0",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            // start of p4's normal turn:
            "all:SOCTurn:game=test|playerNumber=4|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=4",
            },
            3, 99,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, 14, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 12, act.param1);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.ASK_SPECIAL_BUILDING, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 1, act.param1);

                    act = actionLog.get(4);
                    assertEquals(desc, ActionType.ASK_SPECIAL_BUILDING, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 4, act.param1);

                    act = actionLog.get(5);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);

                    // start of SBP: p4
                    act = actionLog.get(6);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);
                    assertEquals(desc + " new current player number", 4, act.param1);

                    act = actionLog.get(7);
                    assertEquals(desc, ActionType.BUY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);
                    assertEquals(desc + " dev card type",
                        (toClientPN == -1) ? SOCDevCardConstants.KNIGHT : 0, act.param1);
                    assertEquals(desc + " remaining cards", 32, act.param2);

                    act = actionLog.get(8);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);
                    assertEquals(desc + " built road", SOCPlayingPiece.ROAD, act.param1);
                    assertEquals(desc + " built at 0x76", 0x76, act.param2);
                    assertEquals(desc + " built by player 4", 4, act.param3);

                    act = actionLog.get(9);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);

                    // start of SBP: p1
                    act = actionLog.get(10);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);
                    assertEquals(desc + " new current player number", 1, act.param1);

                    act = actionLog.get(11);
                    assertEquals(ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 7 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);
                    assertEquals(desc + " built road", SOCPlayingPiece.ROAD, act.param1);
                    assertEquals(desc + " built at 0xa8", 0xa8, act.param2);
                    assertEquals(desc + " built by player 1", 1, act.param3);

                    act = actionLog.get(12);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);

                    // start of p4's normal turn
                    act = actionLog.get(13);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " new current player number", 4, act.param1);
                }
            });
    }

    /**
     * Test extraction of a turn with bank trades and player trades:
     * {@link ActionType#TURN_BEGINS}, {@link ActionType#ROLL_DICE} without gains,
     * {@link ActionType#TRADE_BANK}, {@link ActionType#TRADE_MAKE_OFFER}, {@link ActionType#TRADE_CLEAR_OFFER},
     * {@link ActionType#TRADE_REJECT_OFFER}, {@link ActionType#TRADE_ACCEPT_OFFER},
     * {@link ActionType#END_TURN}.
     * Sequences based on {@code all-basic-actions.soclog}.
     */
    @Test
    public void testBankTradePlayerTrade()
    {
        testExtractEventSequence(new String[]
            {
            // start of turn:
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            // roll dice:
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=12",
            "all:SOCGameServerText:game=test|text=No player gets anything.",
            "all:SOCGameState:game=test|state=20",

            // bank trade:
            "f3:SOCBankTrade:game=test|give=clay=0|ore=3|sheep=0|wheat=0|wood=0|unknown=0|get=clay=1|ore=0|sheep=0|wheat=0|wood=0|unknown=0",
            "all:SOCBankTrade:game=test|give=clay=0|ore=3|sheep=0|wheat=0|wood=0|unknown=0|get=clay=1|ore=0|sheep=0|wheat=0|wood=0|unknown=0|pn=3",

            // undo bank trade:
            "f3:SOCBankTrade:game=test|give=clay=1|ore=0|sheep=0|wheat=0|wood=0|unknown=0|get=clay=0|ore=3|sheep=0|wheat=0|wood=0|unknown=0",
            "all:SOCBankTrade:game=test|give=clay=1|ore=0|sheep=0|wheat=0|wood=0|unknown=0|get=clay=0|ore=3|sheep=0|wheat=0|wood=0|unknown=0|pn=3",

            // player p3 make trade offer to players:
            "f3:SOCMakeOffer:game=test|from=3|to=false,true,true,false|give=clay=0|ore=0|sheep=0|wheat=0|wood=1|unknown=0|get=clay=0|ore=1|sheep=0|wheat=0|wood=0|unknown=0",
            "all:SOCMakeOffer:game=test|from=3|to=false,true,true,false|give=clay=0|ore=0|sheep=0|wheat=0|wood=1|unknown=0|get=clay=0|ore=1|sheep=0|wheat=0|wood=0|unknown=0",
            "all:SOCClearTradeMsg:game=test|playerNumber=-1",

            // p2 clears their own previous offer:
            "f2:SOCClearOffer:game=test|playerNumber=0",
            "all:SOCClearOffer:game=test|playerNumber=2",
            "all:SOCClearTradeMsg:game=test|playerNumber=-1",

            // p1 rejects:
            "f1:SOCRejectOffer:game=test|playerNumber=0",
            "all:SOCRejectOffer:game=test|playerNumber=1",

            // p2 accepts:
            "f2:SOCAcceptOffer:game=test|accepting=0|offering=3",
            "all:SOCAcceptOffer:game=test|accepting=2|offering=3|toAccepting=clay=0|ore=0|sheep=0|wheat=0|wood=1|unknown=0|toOffering=clay=0|ore=1|sheep=0|wheat=0|wood=0|unknown=0",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            // end turn:
            "f3:SOCEndTurn:game=test",
            "all:SOCClearOffer:game=test|playerNumber=-1",
            },
            3, 2,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, 10, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 12, act.param1);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.TRADE_BANK, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    final SOCResourceSet
                        ORE_3 = new SOCResourceSet(0, 3, 0, 0, 0, 0),
                        CLAY_1 = new SOCResourceSet(1, 0, 0, 0, 0, 0);
                    assertEquals(desc + " trade in 3 ore", ORE_3, act.rset1);
                    assertEquals(desc + " get 1 clay", CLAY_1, act.rset2);

                    act = actionLog.get(4);
                    assertEquals(desc, ActionType.TRADE_BANK, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " trade back 1 clay", CLAY_1, act.rset1);
                    assertEquals(desc + " get 3 ore", ORE_3, act.rset2);

                    act = actionLog.get(5);
                    assertEquals(desc, ActionType.TRADE_MAKE_OFFER, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    final SOCResourceSet
                       WOOD_1 = new SOCResourceSet(0, 0, 0, 0, 1, 0),
                       ORE_1 = new SOCResourceSet(0, 1, 0, 0, 0, 0);
                    assertEquals(desc + " offer to give 1 wood", WOOD_1, act.rset1);
                    assertEquals(desc + " to get 1 ore", ORE_1, act.rset2);
                    assertEquals(desc + " player 3 offering", 3, act.param1);

                    act = actionLog.get(6);
                    assertEquals(desc, ActionType.TRADE_CLEAR_OFFER, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " player 2 clearing", 2, act.param1);

                    act = actionLog.get(7);
                    assertEquals(desc, ActionType.TRADE_REJECT_OFFER, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " player 1 rejecting", 1, act.param1);

                    act = actionLog.get(8);
                    assertEquals(desc, ActionType.TRADE_ACCEPT_OFFER, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " gave 1 wood", WOOD_1, act.rset1);
                    assertEquals(desc + " to get 1 ore", ORE_1, act.rset2);
                    assertEquals(desc + " player 3 offering", 3, act.param1);
                    assertEquals(desc + " player 2 accepting", 2, act.param2);

                    act = actionLog.get(9);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                }
            });
    }

    /**
     * Test extraction of a turn with rolling 7, players discard, move robber, rob,
     * play Knight/Soldier dev card, choose victim, rob as usual, rove pirate, rob cloth
     * ({@link SOCScenario#K_SC_CLVI SC_CLVI} scenario):
     * {@link ActionType#TURN_BEGINS}, {@link ActionType#ROLL_DICE}, {@link ActionType#DISCARD},
     * {@link ActionType#MOVE_ROBBER_OR_PIRATE}, {@link ActionType#ROB_PLAYER},
     * {@link ActionType#PLAY_DEV_CARD}, {@link ActionType#CHOOSE_ROBBERY_VICTIM},
     * {@link ActionType#ROB_PLAYER}, {@link ActionType#CHOOSE_MOVE_ROBBER_OR_PIRATE},
     * {@link ActionType#CHOOSE_ROB_CLOTH_OR_RESOURCE}, {@link ActionType#END_TURN}.
     *
     * @see #testPlayDevCards()
     */
    @Test
    public void testRoll7DiscardsMoveRobberSteal()
    {
        testExtractEventSequence(new String[]
            {
            // start of turn:
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            // roll dice: 2 players must discard (p1, p3)
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=7",
            "all:SOCGameState:game=test|state=50",
            "all:SOCGameServerText:game=test|text=p1 and p3 need to discard.",
            "p1:SOCDiscardRequest:game=test|numDiscards=6",
            "p3:SOCDiscardRequest:game=test|numDiscards=9",

            // p1 discards:
            "f1:SOCDiscard:game=test|resources=clay=0|ore=0|sheep=3|wheat=1|wood=2|unknown=0",
            "p1:SOCDiscard:game=test|playerNum=1|resources=clay=0|ore=0|sheep=3|wheat=1|wood=2|unknown=0",
            "!p1:SOCDiscard:game=test|playerNum=1|resources=clay=0|ore=0|sheep=0|wheat=0|wood=0|unknown=6",
            "all:SOCGameState:game=test|state=50",

            // this prompt follows p1 discard, but since extractor ignores SOCGameServerText
            // it'll be included as part of next sequence:
            "all:SOCGameServerText:game=test|text=p3 needs to discard.",

            // p3 discards:
            "f3:SOCDiscard:game=test|resources=clay=0|ore=2|sheep=2|wheat=2|wood=3|unknown=0",
            "p3:SOCDiscard:game=test|playerNum=3|resources=clay=0|ore=2|sheep=2|wheat=2|wood=3|unknown=0",
            "!p3:SOCDiscard:game=test|playerNum=3|resources=clay=0|ore=0|sheep=0|wheat=0|wood=0|unknown=9",
            "all:SOCGameState:game=test|state=33",

            // move robber:
            "all:SOCGameServerText:game=test|text=p3 will move the robber.",
            "f3:SOCMoveRobber:game=test|playerNumber=3|coord=b9",
            "all:SOCMoveRobber:game=test|playerNumber=3|coord=b9",

            // rob player 2:
            "p3:SOCRobberyResult:game=test|perp=3|victim=2|resType=5|amount=1|isGainLose=true",
            "p2:SOCRobberyResult:game=test|perp=3|victim=2|resType=5|amount=1|isGainLose=true",
            "!p[3, 2]:SOCRobberyResult:game=test|perp=3|victim=2|resType=6|amount=1|isGainLose=true",
            "all:SOCGameState:game=test|state=20",

            // play Soldier dev card:
            "f3:SOCPlayDevCardRequest:game=test|devCard=9",
            "all:SOCGameServerText:game=test|text=p3 played a Soldier card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=9",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=15|amount=1",
            "all:SOCGameState:game=test|state=33",

            // these are from dev card, but since extractor ignores SOCGameServerText
            // they'll be included as part of next sequence:

            "all:SOCGameServerText:game=test|text=p3 will move the robber.",

            // move robber:
            "f3:SOCMoveRobber:game=test|playerNumber=3|coord=75",
            "all:SOCMoveRobber:game=test|playerNumber=3|coord=75",
            "all:SOCGameServerText:game=test|text=p3 moved the robber. Must choose a victim.",
            "all:SOCGameState:game=test|state=51",

            // choose victim:
            "p3:SOCChoosePlayerRequest:game=test|choices=[false, true, true, false]",
            "f3:SOCChoosePlayer:game=test|choice=1",

            // rob player 1:
            "p3:SOCRobberyResult:game=test|perp=3|victim=1|resType=2|amount=1|isGainLose=true",
            "p1:SOCRobberyResult:game=test|perp=3|victim=1|resType=2|amount=1|isGainLose=true",
            "!p[3, 1]:SOCRobberyResult:game=test|perp=3|victim=1|resType=6|amount=1|isGainLose=true",
            "all:SOCGameState:game=test|state=20",

            // play Soldier dev card (couldn't actually happen twice in same turn),
            // move pirate, steal cloth (SC_CLVI scenario):
            "f3:SOCPlayDevCardRequest:game=test|devCard=9",
            "all:SOCGameServerText:game=test|text=p3 played a Soldier card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=9",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=15|amount=1",
            "all:SOCGameState:game=test|state=54",

            "all:SOCGameServerText:game=test|text=p3 must choose to move the robber or the pirate.",

            // choose to move pirate ship:
            "f3:SOCChoosePlayer:game=test|choice=-3",
            "all:SOCGameState:game=test|state=34",

            "all:SOCGameServerText:game=test|text=p3 will move the pirate ship.",

            // move the pirate:
            "f3:SOCMoveRobber:game=test|playerNumber=3|coord=-b07",
            "all:SOCMoveRobber:game=test|playerNumber=3|coord=-b07",
            "all:SOCGameServerText:game=test|text=p3 moved the pirate. Must choose to steal cloth or steal resources.",
            "all:SOCGameState:game=test|state=55",

            // choose to steal cloth:
            "p3:SOCChoosePlayer:game=test|choice=2",
            "f3:SOCChoosePlayer:game=test|choice=-3",

            // steal cloth:
            "all:SOCRobberyResult:game=test|perp=3|victim=2|peType=SCENARIO_CLOTH_COUNT|amount=2|isGainLose=false|victimAmount=1",
            "all:SOCGameState:game=test|state=20",

            // play Soldier dev card "again" (but no victims) to gain largest army
            "f3:SOCPlayDevCardRequest:game=test|devCard=9",
            "all:SOCGameServerText:game=test|text=p3 played a Soldier card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=9",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=15|amount=1",
            "all:SOCGameElements:game=test|e5=3",  // LARGEST_ARMY_PLAYER
            "all:SOCGameState:game=test|state=33",

            // these are from dev card, but since extractor ignores SOCGameServerText
            // they'll be included as part of next sequence:

            "all:SOCGameServerText:game=test|text=p3 will move the robber.",

            // move robber: (no victims)
            "f3:SOCMoveRobber:game=test|playerNumber=3|coord=57",
            "all:SOCMoveRobber:game=test|playerNumber=3|coord=57",
            "all:SOCGameServerText:game=test|text=p3 moved the robber.",
            "all:SOCGameState:game=test|state=20",

            // end turn:
            "f3:SOCEndTurn:game=test",
            "all:SOCClearOffer:game=test|playerNumber=-1",
            },
            3, 99,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, (toClientPN != 99) ? 19 : 17, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : (toClientPN == 3) ? 4 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.WAITING_FOR_DISCARDS, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 7, act.param1);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.DISCARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : (toClientPN == 3) ? 2 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.WAITING_FOR_DISCARDS, act.endingGameState);
                    assertEquals(desc, 1, act.param1);
                    assertEquals(desc, (toClientPN == -1) ? new SOCResourceSet(0, 0, 3, 1, 2, 0) : new SOCResourceSet(0, 0, 0, 0, 0, 6), act.rset1);

                    act = actionLog.get(4);
                    assertEquals(desc, ActionType.DISCARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_ROBBER, act.endingGameState);
                    assertEquals(desc, 3, act.param1);
                    assertEquals(desc, (toClientPN != 99) ? new SOCResourceSet(0, 2, 2, 2, 3, 0) : new SOCResourceSet(0, 0, 0, 0, 0, 9), act.rset1);

                    act = actionLog.get(5);
                    assertEquals(desc, ActionType.MOVE_ROBBER_OR_PIRATE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_ROBBER, act.endingGameState);
                    assertEquals(desc, 1, act.param1);
                    assertEquals(desc + " moved robber to 0xb9", 0xb9, act.param2);

                    act = actionLog.get(6);
                    assertEquals(desc, ActionType.ROB_PLAYER, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);

                    act = actionLog.get(7);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_ROBBER, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.KNIGHT, act.param1);

                    act = actionLog.get(8);
                    assertEquals(desc, ActionType.MOVE_ROBBER_OR_PIRATE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.WAITING_FOR_ROB_CHOOSE_PLAYER, act.endingGameState);
                    assertEquals(desc, 1, act.param1);
                    assertEquals(desc + " moved robber to 0x75", 0x75, act.param2);

                    int idx = 9;  // observer doesn't see CHOOSE_ROBBERY_VICTIM
                    act = actionLog.get(idx);
                    if (toClientPN != 99)
                    {
                        assertEquals(desc, ActionType.CHOOSE_ROBBERY_VICTIM, act.actType);
                        assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                        assertEquals(desc, SOCGame.WAITING_FOR_ROB_CHOOSE_PLAYER, act.endingGameState);
                        assertEquals(desc, (toClientPN == -1) ? 1 : -1, act.param1);
                        ++idx;
                    }

                    act = actionLog.get(idx);  // 10 or 9
                    assertEquals(desc, ActionType.ROB_PLAYER, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 1, act.param1);
                    assertEquals(desc,
                        (toClientPN != 99) ? new SOCResourceSet(0, 1, 0, 0, 0, 0) : new SOCResourceSet(0, 0, 0, 0, 0, 1),
                         act.rset1);
                    ++idx;

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.WAITING_FOR_ROBBER_OR_PIRATE, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.KNIGHT, act.param1);
                    ++idx;

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.CHOOSE_MOVE_ROBBER_OR_PIRATE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_PIRATE, act.endingGameState);
                    assertEquals(desc + " chose pirate", 2, act.param1);
                    ++idx;

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.MOVE_ROBBER_OR_PIRATE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.WAITING_FOR_ROB_CLOTH_OR_RESOURCE, act.endingGameState);
                    assertEquals(desc, 2, act.param1);
                    assertEquals(desc + " moved pirate to 0xb07", 0xb07, act.param2);
                    ++idx;

                    if (toClientPN != 99)
                    {
                        act = actionLog.get(idx);
                        assertEquals(desc, ActionType.CHOOSE_ROB_CLOTH_OR_RESOURCE, act.actType);
                        assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                        assertEquals(desc, SOCGame.WAITING_FOR_ROB_CLOTH_OR_RESOURCE, act.endingGameState);
                        assertEquals(desc, (toClientPN == -1) ? 2 : 0, act.param1);
                        ++idx;
                    }

                    act = actionLog.get(idx);  // 15 or 13
                    assertEquals(desc, ActionType.ROB_PLAYER, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertNull(desc, act.rset1);
                    assertEquals(desc, 2, act.param1);
                    assertEquals(desc + " steal cloth", SOCPlayerElement.PEType.SCENARIO_CLOTH_COUNT.getValue(), act.param2);
                    ++idx;

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 7 : 6, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_ROBBER, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.KNIGHT, act.param1);
                    ++idx;

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.MOVE_ROBBER_OR_PIRATE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 1, act.param1);
                    assertEquals(desc + " moved robber to 0x57", 0x57, act.param2);
                    ++idx;

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                }
            });
    }

    /**
     * Test extraction of a turn with buying a dev card:
     * {@link ActionType#TURN_BEGINS}, {@link ActionType#ROLL_DICE} without gains,
     * {@link ActionType#BUY_DEV_CARD}, {@link ActionType#END_TURN}.
     * Sequences based on {@code all-basic-actions.soclog}.
     *
     * @see #testPlayDevCards()
     */
    @Test
    public void testBuyDevCard()
    {
        testExtractEventSequence(new String[]
            {
            // start of turn:
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            // roll dice:
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=12",
            "all:SOCGameServerText:game=test|text=No player gets anything.",
            "all:SOCGameState:game=test|state=20",

            // buy dev card:
            "f3:SOCBuyDevCardRequest:game=test",
            "all:SOCPlayerElements:game=test|playerNum=3|actionType=LOSE|e2=1,e3=1,e4=1",
            "p3:SOCDevCardAction:game=test|playerNum=3|actionType=DRAW|cardType=9",
            "!p3:SOCDevCardAction:game=test|playerNum=3|actionType=DRAW|cardType=0",
            "all:SOCSimpleAction:game=test|pn=3|actType=1|v1=15|v2=0",
            "all:SOCGameState:game=test|state=20",

            // end turn:
            "f3:SOCEndTurn:game=test",
            "all:SOCClearOffer:game=test|playerNumber=-1",
            },
            3, 99,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, 5, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 12, act.param1);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.BUY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dev card type",
                        (toClientPN != 99) ? SOCDevCardConstants.KNIGHT : 0, act.param1);
                    assertEquals(desc + " remaining cards", 15, act.param2);

                    act = actionLog.get(4);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                }
            });
    }

    /**
     * Test extraction of a turn with playing dev cards:
     * {@link ActionType#TURN_BEGINS}, {@link ActionType#ROLL_DICE} without gains,
     * various {@link ActionType#PLAY_DEV_CARD}, {@link ActionType#END_TURN}.
     * Sequences based on {@code all-basic-actions.soclog}.
     *<P>
     * {@code PLAY_DEV_CARD} for Knight/Soldier is tested in {@link #testRoll7DiscardsMoveRobberSteal()},
     * for Road Building in {@link #testPlayDevCardRoadBuilding()}.
     *
     * @see #testBuyDevCard()
     */
    @Test
    public void testPlayDevCards()
    {
        testExtractEventSequence(new String[]
            {
            // start of turn:
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            // roll dice:
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=12",
            "all:SOCGameServerText:game=test|text=No player gets anything.",
            "all:SOCGameState:game=test|state=20",

            // Play dev cards:
            // These wouldn't really happen all in same turn

            // monopoly with 1 victim:
            "f3:SOCPlayDevCardRequest:game=test|devCard=3",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Monopoly card.",
            "all:SOCGameState:game=test|state=53",
            "f3:SOCPickResourceType:game=test|resType=3",
            "all:SOCPlayerElement:game=test|playerNum=2|actionType=SET|elementType=3|amount=0|news=Y",
            "all:SOCResourceCount:game=test|playerNum=2|count=2",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=3|amount=1",
            "all:SOCSimpleAction:game=test|pn=3|actType=3|v1=1|v2=3",
            "p2:SOCGameServerText:game=test|text=p3's Monopoly took your 1 sheep.",
            "all:SOCGameState:game=test|state=20",

            // with 0 victims:
            "f3:SOCPlayDevCardRequest:game=test|devCard=3",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Monopoly card.",
            "all:SOCGameState:game=test|state=53",
            "f3:SOCPickResourceType:game=test|resType=5",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=5|amount=0",
            "all:SOCSimpleAction:game=test|pn=3|actType=3|v1=0|v2=5",
            "all:SOCGameState:game=test|state=20",

            // with 2 victims:
            "f3:SOCPlayDevCardRequest:game=test|devCard=3",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Monopoly card.",
            "all:SOCGameState:game=test|state=53",
            "f3:SOCPickResourceType:game=test|resType=3",
            "all:SOCPlayerElement:game=test|playerNum=1|actionType=SET|elementType=3|amount=0|news=Y",
            "all:SOCResourceCount:game=test|playerNum=1|count=7",
            "all:SOCPlayerElement:game=test|playerNum=2|actionType=SET|elementType=3|amount=0|news=Y",
            "all:SOCResourceCount:game=test|playerNum=2|count=2",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=3|amount=6",
            "all:SOCSimpleAction:game=test|pn=3|actType=3|v1=6|v2=3",
            "p1:SOCGameServerText:game=test|text=p3's Monopoly took your 5 sheep.",
            "p2:SOCGameServerText:game=test|text=p3's Monopoly took your 1 sheep.",
            "all:SOCGameState:game=test|state=20",

            // discovery/year of plenty:
            "f3:SOCPlayDevCardRequest:game=test|devCard=2",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=2",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Year of Plenty card.",
            "all:SOCGameState:game=test|state=52",
            "f3:SOCPickResources:game=test|resources=clay=0|ore=2|sheep=0|wheat=0|wood=0|unknown=0",
            "all:SOCPickResources:game=test|resources=clay=0|ore=2|sheep=0|wheat=0|wood=0|unknown=0|pn=3|reason=2",
            "all:SOCGameState:game=test|state=20",

            // end turn:
            "f3:SOCEndTurn:game=test",
            "all:SOCClearOffer:game=test|playerNumber=-1",
            },
            3, 2,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, 8, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 12, act.param1);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 12 : ((toClientPN == 2) ? 10 : 9), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " played mono card", SOCDevCardConstants.MONO, act.param1);
                    assertEquals(desc + " resources from mono", new SOCResourceSet(0, 0, 1, 0, 0, 0), act.rset1);

                    act = actionLog.get(4);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 9 : 7, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " played mono card", SOCDevCardConstants.MONO, act.param1);
                    assertNull(desc + " nothing gained from mono", act.rset1);

                    act = actionLog.get(5);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 15 : ((toClientPN == 2) ? 12 : 11), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " played mono card", SOCDevCardConstants.MONO, act.param1);
                    assertEquals(desc + " resources from mono", new SOCResourceSet(0, 0, 6, 0, 0, 0), act.rset1);

                    act = actionLog.get(6);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 8 : 6, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " played discov card", SOCDevCardConstants.DISC, act.param1);
                    assertEquals(desc + " resources from discov", new SOCResourceSet(0, 2, 0, 0, 0, 0), act.rset1);

                    act = actionLog.get(7);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                }
            });
    }

    /**
     * Test extraction of a turn with playing the Road Building dev card
     * ({@link ActionType#PLAY_DEV_CARD}) in different conditions,
     * including win game ({@link ActionType#GAME_OVER}) by gaining Longest Route.
     *<P>
     * @see #testPlayDevCards()
     */
    @Test
    public void testPlayDevCardRoadBuilding()
    {
        testExtractEventSequence(new String[]
            {
            // start of turn:
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            // play Road Building before rolling dice: 1 road, 1 ship
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=70c",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=70c",
            "all:SOCGameState:game=test|state=41",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=60c",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=60c",
            "all:SOCGameState:game=test|state=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            // roll dice:
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=12",
            "all:SOCGameServerText:game=test|text=No player gets anything.",
            "all:SOCGameState:game=test|state=20",

            // Basic Road Building: 2 roads, no Longest Route change:
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=704",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=704",
            "all:SOCGameState:game=test|state=41",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=804",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=804",
            "all:SOCGameState:game=test|state=20",

            // 1 ship left, no Longest Route change:
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=41",
            "p3:SOCGameServerText:game=test|text=You may place your 1 remaining road or ship.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=a8",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=a8",
            "all:SOCGameState:game=test|state=20",

            // 1 road left, gains Longest Route:
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=41",
            "p3:SOCGameServerText:game=test|text=You may place your 1 remaining road.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=a8",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=a8",
            "all:SOCGameElements:game=test|e6=3",
            "all:SOCGameState:game=test|state=20",

            // 1 road, 1 ship, gains Longest Route after 1st placed:
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=509",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=509",
            "all:SOCGameElements:game=test|e6=3",
            "all:SOCGameState:game=test|state=41",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=50d",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=50d",
            "all:SOCGameState:game=test|state=20",

            // 2 ships, gains Longest Route after 2nd placed:
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=60c",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=60c",
            "all:SOCGameState:game=test|state=41",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=50d",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=50d",
            "all:SOCGameElements:game=test|e6=3",
            "all:SOCGameState:game=test|state=20",

            // end turn:
            "f3:SOCEndTurn:game=test",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            // win by gaining Longest Route after 1st placed:
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=a04",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=a04",
            "all:SOCGameElements:game=test|e6=3",
            "all:SOCGameElements:game=test|e4=3",
            "all:SOCGameState:game=test|state=1000",
            "all:SOCGameServerText:game=test|text=>>> p3 has won the game with 10 points.",
            "all:SOCGameStats:game=test|0|2|0|10|false|true|false|false",
            "p3:SOCPlayerStats:game=test|p=1|p=0|p=0|p=0|p=0|p=0",

            // win by gaining Longest Route after 2nd placed:
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=76",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=76",
            "all:SOCGameState:game=test|state=41",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=74",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=74",
            "all:SOCGameElements:game=test|e6=3",
            "all:SOCGameElements:game=test|e4=3",
            "all:SOCGameState:game=test|state=1000",
            "all:SOCGameServerText:game=test|text=>>> p3 has won the game with 11 points.",
            "all:SOCGameStats:game=test|0|2|0|11|false|true|false|false",
            "p3:SOCPlayerStats:game=test|p=1|p=2|p=5|p=0|p=0|p=0",

            //
            // Cancel road building after 0 or 1 free placements:
            //

            // build 0 before roll, cancel & continue play
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCCancelBuildRequest:game=test|pieceType=3",
            "all:SOCGameServerText:game=test|text=p3 cancelled the Road Building card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=ADD_OLD|cardType=1",
            "all:SOCPlayerElement:game=g|playerNum=3|actionType=SET|elementType=19|amount=0",
            "all:SOCGameState:game=test|state=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=3",
            "all:SOCDiceResultResources:game=test|p=1|p=5|p=6|p=1|p=1",
            "p5:SOCPlayerElements:game=test|playerNum=5|actionType=SET|e1=3,e2=3,e3=0,e4=0,e5=0",
            "all:SOCGameState:game=test|state=20",

            // build 0 after roll, cancel & continue play
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCCancelBuildRequest:game=test|pieceType=3",
            "all:SOCGameServerText:game=test|text=p3 cancelled the Road Building card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=ADD_OLD|cardType=1",
            "all:SOCPlayerElement:game=g|playerNum=3|actionType=SET|elementType=19|amount=0",
            "all:SOCGameState:game=test|state=20",
            "f3:SOCEndTurn:game=test",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            // build 1 before roll, cancel & continue play
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=60e",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=60e",
            "all:SOCGameState:game=test|state=41",
            "f3:SOCCancelBuildRequest:game=test|pieceType=3",
            "all:SOCGameServerText:game=test|text=p3 skipped placing the second ship.",
            "all:SOCGameState:game=test|state=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=5",
            "all:SOCDiceResultResources:game=test|p=1|p=3|p=6|p=1|p=1",
            "p3:SOCPlayerElements:game=test|playerNum=3|actionType=SET|e1=2,e2=0,e3=3,e4=0,e5=1",
            "all:SOCGameState:game=test|state=20",

            // build 1 after roll, cancel & continue play
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=60f",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=60f",
            "all:SOCGameState:game=test|state=41",
            "f3:SOCCancelBuildRequest:game=test|pieceType=3",
            "all:SOCGameServerText:game=test|text=p3 skipped placing the second ship.",
            "all:SOCGameState:game=test|state=20",

            // build 0, cancel by end turn
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=2",
            "all:SOCGameServerText:game=test|text=No player gets anything.",
            "all:SOCGameState:game=test|state=20",
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCEndTurn:game=test",
            "all:SOCGameServerText:game=test|text=p3 cancelled the Road Building card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=ADD_OLD|cardType=1",
            "all:SOCPlayerElement:game=g|playerNum=3|actionType=SET|elementType=19|amount=0",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            // build 0, cancel by end turn, other player SBP
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=5",
            "all:SOCDiceResultResources:game=test|p=1|p=3|p=7|p=1|p=1",
            "p3:SOCPlayerElements:game=test|playerNum=3|actionType=SET|e1=3,e2=0,e3=3,e4=0,e5=1",
            "all:SOCGameState:game=test|state=20",
            "f5:SOCBuildRequest:game=test|pieceType=-1",
            "all:SOCPlayerElement:game=test|playerNum=5|actionType=SET|elementType=16|amount=1",
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCEndTurn:game=test",
            "all:SOCGameServerText:game=test|text=p3 cancelled the Road Building card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=ADD_OLD|cardType=1",
            "all:SOCPlayerElement:game=g|playerNum=3|actionType=SET|elementType=19|amount=0",
            "all:SOCClearOffer:game=test|playerNumber=-1",
            "all:SOCTurn:game=test|playerNumber=5|gameState=100",
            "f5:SOCBuyDevCardRequest:game=test",
            "all:SOCPlayerElements:game=test|playerNum=5|actionType=LOSE|e2=1,e3=1,e4=1",
            "p5:SOCDevCardAction:game=test|playerNum=5|actionType=DRAW|cardType=1",
            "!p5:SOCDevCardAction:game=test|playerNum=5|actionType=DRAW|cardType=0",
            "all:SOCSimpleAction:game=test|pn=5|actType=1|v1=33|v2=0",
            "all:SOCGameState:game=test|state=100",
            "f5:SOCEndTurn:game=test",
            "all:SOCPlayerElement:game=test|playerNum=5|actionType=SET|elementType=16|amount=0",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            // build 1, cancel by end turn
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=4",
            "all:SOCGameServerText:game=test|text=No player gets anything.",
            "all:SOCGameState:game=test|state=20",
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=e06",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=e06",
            "all:SOCGameState:game=test|state=41",
            "f3:SOCEndTurn:game=test",
            "all:SOCGameServerText:game=test|text=p3 skipped placing the second road.",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            // build 1, cancel by end turn, other player SBP
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=8",
            "all:SOCDiceResultResources:game=test|p=1|p=3|p=9|p=2|p=5",
            "p3:SOCPlayerElements:game=test|playerNum=3|actionType=SET|e1=3,e2=0,e3=3,e4=0,e5=3",
            "all:SOCGameState:game=test|state=20",
            "f5:SOCBuildRequest:game=test|pieceType=-1",
            "all:SOCPlayerElement:game=test|playerNum=5|actionType=SET|elementType=16|amount=1",
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=40",
            "p3:SOCGameServerText:game=test|text=You may place 2 roads/ships.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=50d",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=50d",
            "all:SOCGameState:game=test|state=41",
            "f3:SOCEndTurn:game=test",
            "all:SOCGameServerText:game=test|text=p3 skipped placing the second road.",
            "all:SOCClearOffer:game=test|playerNumber=-1",
            "all:SOCTurn:game=test|playerNumber=5|gameState=100",
            "f5:SOCEndTurn:game=test",
            "all:SOCPlayerElement:game=test|playerNum=5|actionType=SET|elementType=16|amount=0",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            // with 1 road left: build 0 before roll, cancel & continue play
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=41",
            "p3:SOCGameServerText:game=test|text=You may place your 1 remaining road.",
            "f3:SOCCancelBuildRequest:game=test|pieceType=0",
            "all:SOCGameServerText:game=test|text=p3 cancelled the Road Building card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=ADD_OLD|cardType=1",
            "all:SOCPlayerElement:game=g|playerNum=3|actionType=SET|elementType=19|amount=0",
            "all:SOCGameState:game=test|state=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=10",
            "all:SOCGameServerText:game=test|text=No player gets anything.",
            "all:SOCGameState:game=test|state=20",

            // with 1 road left: build 0 after roll, cancel & continue play
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=41",
            "p3:SOCGameServerText:game=test|text=You may place your 1 remaining road.",
            "f3:SOCCancelBuildRequest:game=test|pieceType=0",
            "all:SOCGameServerText:game=test|text=p3 cancelled the Road Building card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=ADD_OLD|cardType=1",
            "all:SOCPlayerElement:game=g|playerNum=3|actionType=SET|elementType=19|amount=0",
            "all:SOCGameState:game=test|state=20",

            // with 1 road left: build 0, cancel by end turn
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=41",
            "p3:SOCGameServerText:game=test|text=You may place your 1 remaining road.",
            "f3:SOCEndTurn:game=test",
            "all:SOCGameServerText:game=test|text=p3 cancelled the Road Building card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=ADD_OLD|cardType=1",
            "all:SOCPlayerElement:game=g|playerNum=3|actionType=SET|elementType=19|amount=0",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            // with 1 road left: build 0, cancel by end turn, other player SBP
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=9",
            "all:SOCDiceResultResources:game=test|p=1|p=1|p=9|p=2|p=2",
            "p1:SOCPlayerElements:game=test|playerNum=1|actionType=SET|e1=0,e2=5,e3=0,e4=2,e5=2",
            "all:SOCGameState:game=test|state=20",
            "f1:SOCBuildRequest:game=test|pieceType=-1",
            "all:SOCPlayerElement:game=test|playerNum=1|actionType=SET|elementType=16|amount=1",
            "f3:SOCPlayDevCardRequest:game=test|devCard=1",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCGameServerText:game=test|text=p3 played a Road Building card.",
            "all:SOCGameState:game=test|state=41",
            "p3:SOCGameServerText:game=test|text=You may place your 1 remaining road.",
            "f3:SOCEndTurn:game=test",
            "all:SOCGameServerText:game=test|text=p3 cancelled the Road Building card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=ADD_OLD|cardType=1",
            "all:SOCPlayerElement:game=g|playerNum=3|actionType=SET|elementType=19|amount=0",
            "all:SOCClearOffer:game=test|playerNumber=-1",
            "all:SOCTurn:game=test|playerNumber=1|gameState=100",

            },
            3, 99,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, 60, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 15 : ((toClientPN == 3) ? 12 : 11), act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " played road building", SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(desc + " road1", 0x70c, act.param2);
                    assertEquals(desc + " ship2", -0x60c, act.param3);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 12, act.param1);

                    act = actionLog.get(4);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 14 : ((toClientPN == 3) ? 11 : 10), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " played road building", SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(0x704, act.param2);
                    assertEquals(0x804, act.param3);

                    act = actionLog.get(5);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 10 : ((toClientPN == 3) ? 8 : 7), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " played road building", SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(-0xa8, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    act = actionLog.get(6);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 11 : ((toClientPN == 3) ? 9 : 8), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " played road building", SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(0xa8, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    act = actionLog.get(7);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 15 : ((toClientPN == 3) ? 12 : 11), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " played road building", SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(0x509, act.param2);
                    assertEquals(-0x50d, act.param3);

                    act = actionLog.get(8);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 15 : ((toClientPN == 3) ? 12 : 11), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " played road building", SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(-0x60c, act.param2);
                    assertEquals(-0x50d, act.param3);

                    act = actionLog.get(9);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);

                    // win by gaining Longest Route after 1st placed:

                    act = actionLog.get(10);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(11);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 12 : ((toClientPN == 3) ? 10 : 9), act.eventSequence.size());
                    assertEquals(desc, SOCGame.OVER, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(0xa04, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    act = actionLog.get(12);
                    assertEquals(desc, ActionType.GAME_OVER, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc + " winning player", 3, act.param1);

                    // win by gaining Longest Route after 2nd placed:

                    act = actionLog.get(13);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(14);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 16 : ((toClientPN == 3) ? 13 : 12), act.eventSequence.size());
                    assertEquals(desc, SOCGame.OVER, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(0x76, act.param2);
                    assertEquals(0x74, act.param3);

                    act = actionLog.get(15);
                    assertEquals(desc, ActionType.GAME_OVER, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, 3, act.param1);

                    //
                    // Cancel road building after 0 or 1 free placements:
                    //

                    // build 0 before roll, cancel & continue play:

                    act = actionLog.get(16);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(17);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 12 : ((toClientPN == 3) ? 10 : 9), act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(Integer.MAX_VALUE, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    act = actionLog.get(18);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 3, act.param1);

                    // build 0 after roll, cancel & continue play:

                    act = actionLog.get(19);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 11 : ((toClientPN == 3) ? 9 : 8), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(Integer.MAX_VALUE, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    act = actionLog.get(20);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);

                    // build 1 before roll, cancel & continue play:

                    act = actionLog.get(21);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(22);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 14 : ((toClientPN == 3) ? 11 : 10), act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(-0x60e, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    // build 1 after roll, cancel & continue play:

                    act = actionLog.get(23);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : ((toClientPN == 3) ? 4 : 3), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 5, act.param1);

                    act = actionLog.get(24);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 13 : ((toClientPN == 3) ? 10 : 9), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(-0x60f, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    // build 0, cancel by end turn:

                    act = actionLog.get(25);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(26);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 2, act.param1);

                    act = actionLog.get(27);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : ((toClientPN == 3) ? 8 : 7), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_FREE_ROAD1, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(Integer.MAX_VALUE, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    act = actionLog.get(28);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_FREE_ROAD1, act.endingGameState);

                    // build 0, cancel by end turn, other player SBP:

                    act = actionLog.get(29);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(30);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : ((toClientPN == 3) ? 4 : 3), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 5, act.param1);

                    act = actionLog.get(31);
                    assertEquals(desc, ActionType.ASK_SPECIAL_BUILDING, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 5, act.param1);

                    act = actionLog.get(32);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : ((toClientPN == 3) ? 8 : 7), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_FREE_ROAD1, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(Integer.MAX_VALUE, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    act = actionLog.get(33);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_FREE_ROAD1, act.endingGameState);

                    act = actionLog.get(34);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);
                    assertEquals(desc, 5, act.param1);

                    act = actionLog.get(35);
                    assertEquals(desc, ActionType.BUY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);
                    assertEquals(desc + " dev card type",
                        (toClientPN == -1) ? SOCDevCardConstants.ROADS : 0, act.param1);

                    act = actionLog.get(36);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);

                    // build 1, cancel by end turn:

                    act = actionLog.get(37);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(38);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 4, act.param1);

                    act = actionLog.get(39);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 10 : ((toClientPN == 3) ? 8 : 7), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_FREE_ROAD2, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(0xe06, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    act = actionLog.get(40);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_FREE_ROAD2, act.endingGameState);

                    // build 1, cancel by end turn, other player SBP:

                    act = actionLog.get(41);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(42);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : ((toClientPN == 3) ? 4 : 3), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 8, act.param1);

                    act = actionLog.get(43);
                    assertEquals(desc, ActionType.ASK_SPECIAL_BUILDING, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 5, act.param1);

                    act = actionLog.get(44);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 10 : ((toClientPN == 3) ? 8 : 7), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_FREE_ROAD2, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(-0x50d, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    act = actionLog.get(45);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_FREE_ROAD2, act.endingGameState);

                    act = actionLog.get(46);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);
                    assertEquals(desc, 5, act.param1);

                    act = actionLog.get(47);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);

                    // with 1 road left: build 0 before roll, cancel & continue play:

                    act = actionLog.get(48);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(49);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 12 : ((toClientPN == 3) ? 10 : 9), act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(Integer.MAX_VALUE, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    act = actionLog.get(50);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 10, act.param1);

                    // with 1 road left: build 0 after roll, cancel & continue play:

                    act = actionLog.get(51);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 11 : ((toClientPN == 3) ? 9 : 8), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(Integer.MAX_VALUE, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    // with 1 road left: build 0, cancel by end turn:

                    act = actionLog.get(52);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : ((toClientPN == 3) ? 8 : 7), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_FREE_ROAD2, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(Integer.MAX_VALUE, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    act = actionLog.get(53);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_FREE_ROAD2, act.endingGameState);

                    // with 1 road left: build 0, cancel by end turn, other player SBP:

                    act = actionLog.get(54);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(55);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 9, act.param1);

                    act = actionLog.get(56);
                    assertEquals(desc, ActionType.ASK_SPECIAL_BUILDING, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 1, act.param1);

                    act = actionLog.get(57);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : ((toClientPN == 3) ? 8 : 7), act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_FREE_ROAD2, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.ROADS, act.param1);
                    assertEquals(Integer.MAX_VALUE, act.param2);
                    assertEquals(Integer.MAX_VALUE, act.param3);

                    act = actionLog.get(58);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_FREE_ROAD2, act.endingGameState);

                    act = actionLog.get(59);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.SPECIAL_BUILDING, act.endingGameState);
                    assertEquals(desc, 1, act.param1);
                }
            });
    }

    /**
     * Test gold hexes during roll, revealing fog hexes during building, gold hex revealed from fog hex,
     * fog and gold during initial placement: {@link ActionType#BUILD_PIECE}, {@link ActionType#MOVE_PIECE},
     * {@link ActionType#CHOOSE_FREE_RESOURCES}, etc.
     */
    @Test
    public void testGoldHexFogHex()
    {
        testExtractEventSequence(new String[]
            {
            // start of turn:
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            // roll dice:
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=4",
            "all:SOCDiceResultResources:game=test|p=1|p=2|p=6|p=1|p=3",
            "p2:SOCPlayerElements:game=test|playerNum=2|actionType=SET|e1=2,e2=0,e3=2,e4=2,e5=0",
            "all:SOCGameServerText:game=test|text=p3 needs to pick resources from the gold hex.",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=1",
            "p3:SOCSimpleRequest:game=test|pn=3|reqType=1|v1=1|v2=0",
            "all:SOCGameState:game=test|state=56",

            // gain 1 free resource from gold:
            "f3:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=0|wheat=0|wood=1|unknown=0",
            "all:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=0|wheat=0|wood=1|unknown=0|pn=3|reason=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=0",
            "all:SOCGameState:game=test|state=20",

            // build road, reveal non-gold fog hex:
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=406",
            "all:SOCPlayerElements:game=test|playerNum=3|actionType=LOSE|e1=1,e5=1",
            "all:SOCRevealFogHex:game=test|hexCoord=305|hexType=5|diceNum=6",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=406",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=5|amount=1|news=Y",
            "all:SOCGameServerText:game=test|text=p3 gets 1 wood by revealing the fog hex.",
            "all:SOCGameState:game=test|state=20",

            // build road, reveal gold fog hex:
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=708",
            "all:SOCPlayerElements:game=test|playerNum=3|actionType=LOSE|e1=1,e5=1",
            "all:SOCRevealFogHex:game=test|hexCoord=508|hexType=7|diceNum=5",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=708",
            "all:SOCGameState:game=test|state=56",
            "all:SOCGameServerText:game=test|text=p3 needs to pick resources from the gold hex.",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=1",
            "p3:SOCSimpleRequest:game=test|pn=3|reqType=1|v1=1|v2=0",

            // pick free from revealed gold hex:
            "f3:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=0|wheat=0|wood=1|unknown=0",
            "all:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=0|wheat=0|wood=1|unknown=0|pn=3|reason=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=0",
            "all:SOCGameState:game=test|state=20",

            // end turn:
            "f3:SOCEndTurn:game=test",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            // Move Ship, reveal hex from fog:

            // reveal non-gold hex

            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=12",
            "all:SOCGameState:game=test|state=20",

            "f3:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=c0a|toCoord=d05",
            "all:SOCRevealFogHex:game=test|hexCoord=f05|hexType=4|diceNum=9",
            "all:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=c0a|toCoord=d05",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=4|amount=1|news=Y",

            "all:SOCGameServerText:game=test|text=p3 gets 1 wheat by revealing the fog hex.",

            // reveal non-gold and gain longest route

            "f3:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=d05|toCoord=e0b",
            "all:SOCRevealFogHex:game=test|hexCoord=f0d|hexType=2|diceNum=3",
            "all:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=d05|toCoord=e0b",
            "all:SOCGameElements:game=test|e6=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=2|amount=1|news=Y",

            "all:SOCGameServerText:game=test|text=p3 gets 1 ore by revealing the fog hex.",

            // reveal gold

            "f3:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=70c|toCoord=c0c",
            "all:SOCRevealFogHex:game=test|hexCoord=d0e|hexType=7|diceNum=6",
            "all:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=70c|toCoord=c0c",
            "all:SOCGameState:game=test|state=56",
            "all:SOCGameServerText:game=test|text=p3 needs to pick resources from the gold hex.",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=1",
            "p3:SOCSimpleRequest:game=test|pn=3|reqType=1|v1=1|v2=0",

            "f3:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=0|wheat=1|wood=0|unknown=0",
            "all:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=0|wheat=1|wood=0|unknown=0|pn=3|reason=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=0",
            "all:SOCGameState:game=test|state=20",

            // reveal gold and gain longest route

            "f3:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=70c|toCoord=c0c",
            "all:SOCRevealFogHex:game=test|hexCoord=d0e|hexType=7|diceNum=6",
            "all:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=70c|toCoord=c0c",
            "all:SOCGameElements:game=test|e6=3",
            "all:SOCGameState:game=test|state=56",
            "all:SOCGameServerText:game=test|text=p3 needs to pick resources from the gold hex.",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=1",
            "p3:SOCSimpleRequest:game=test|pn=3|reqType=1|v1=1|v2=0",

            "f3:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=0|wheat=1|wood=0|unknown=0",
            "all:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=0|wheat=1|wood=0|unknown=0|pn=3|reason=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=0",
            "all:SOCGameState:game=test|state=20",

            // reveal gold and win by gaining longest route

            "f3:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=209|toCoord=a0a",
            "all:SOCRevealFogHex:game=test|hexCoord=b09|hexType=7|diceNum=9",
            "all:SOCMovePiece:game=test|pn=3|pieceType=3|fromCoord=209|toCoord=a0a",
            "all:SOCGameElements:game=test|e6=3",
            "all:SOCGameElements:game=test|e4=3",
            "all:SOCGameState:game=test|state=1000",

            "all:SOCGameServerText:game=test|text=>>> p3 has won the game with 11 points.",
            "all:SOCDevCardAction:game=test|playerNum=1|actionType=ADD_OLD|cardType=7",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=ADD_OLD|cardType=4",
            "all:SOCGameStats:game=test|0|3|0|11|false|true|false|false",
            "all:SOCGameServerText:game=test|text=This game was 3 rounds, and took 1 minutes 53 seconds.",
            "p3:SOCPlayerStats:game=test|p=1|p=0|p=0|p=4|p=0|p=1|p=1",

            // Initial Placement: Place settlement, reveal hex from fog:

            // not gold:

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=3|gameState=5",

            "f1:SOCChangeFace:game=test|playerNumber=1|faceId=-1",
            "all:SOCChangeFace:game=test|playerNumber=1|faceId=-1",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=408",
            "all:SOCRevealFogHex:game=test|hexCoord=307|hexType=5|diceNum=2",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=408",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=5|amount=1|news=Y",
            "all:SOCGameServerText:game=test|text=p3 gets 1 wood by revealing the fog hex.",
            "all:SOCGameState:game=test|state=6",

            // 2 non-gold:

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=3|gameState=10",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=80a",
            "all:SOCRevealFogHex:game=test|hexCoord=90a|hexType=4|diceNum=10",
            "all:SOCRevealFogHex:game=test|hexCoord=70b|hexType=1|diceNum=8",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=80a",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=4|amount=1|news=Y",
            "all:SOCGameServerText:game=test|text=p3 gets 1 wheat by revealing the fog hex.",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=1|amount=1|news=Y",
            "all:SOCGameServerText:game=test|text=p3 gets 1 clay by revealing the fog hex.",
            "all:SOCGameState:game=test|state=11",

            // gold:

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a road or ship.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=905",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=905",
            "all:SOCGameState:game=test|state=10",

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=808",
            "all:SOCRevealFogHex:game=test|hexCoord=709|hexType=7|diceNum=4",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=808",
            "all:SOCGameState:game=test|state=14",
            "all:SOCGameServerText:game=test|text=p3 needs to pick resources from the gold hex.",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=1",
            "p3:SOCSimpleRequest:game=test|pn=3|reqType=1|v1=1|v2=0",

            "f3:SOCPickResources:game=test|resources=clay=1|ore=0|sheep=0|wheat=0|wood=0|unknown=0",
            "all:SOCPickResources:game=test|resources=clay=1|ore=0|sheep=0|wheat=0|wood=0|unknown=0|pn=3|reason=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=0",
            "all:SOCGameState:game=test|state=11",

            // 2 gold:

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=3|gameState=5",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=408",
            "all:SOCRevealFogHex:game=test|hexCoord=307|hexType=7|diceNum=2",
            "all:SOCRevealFogHex:game=test|hexCoord=309|hexType=7|diceNum=6",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=408",
            "all:SOCGameState:game=test|state=14",
            "all:SOCGameServerText:game=test|text=p3 needs to pick resources from the gold hex.",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=2",
            "p3:SOCSimpleRequest:game=test|pn=3|reqType=1|v1=2|v2=0",

            "f3:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=1|wheat=1|wood=0|unknown=0",
            "all:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=1|wheat=1|wood=0|unknown=0|pn=3|reason=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=0",
            "all:SOCGameState:game=test|state=6",

            // 1 gold, 1 non-gold:

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=3|gameState=5",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=805",
            "all:SOCRevealFogHex:game=test|hexCoord=904|hexType=3|diceNum=11",
            "all:SOCRevealFogHex:game=test|hexCoord=906|hexType=7|diceNum=6",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=805",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=3|amount=1|news=Y",
            "all:SOCGameServerText:game=test|text=p3 gets 1 sheep by revealing the fog hex.",
            "all:SOCGameState:game=test|state=14",
            "all:SOCGameServerText:game=test|text=p3 needs to pick resources from the gold hex.",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=1",
            "p3:SOCSimpleRequest:game=test|pn=3|reqType=1|v1=1|v2=0",

            "f3:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=0|wheat=1|wood=0|unknown=0",
            "all:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=0|wheat=1|wood=0|unknown=0|pn=3|reason=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=0",
            "all:SOCGameState:game=test|state=6",

            // Initial Placement tests: Place settlement and ship, reveal hex from fog:

            // reveal non-gold hex, current player doesn't change afterwards:

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=3|gameState=5",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=604",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=604",
            "all:SOCGameState:game=test|state=6",

            "all:SOCGameServerText:game=test|text=It's p3 turn to build a road or ship.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=604",
            "all:SOCRevealFogHex:game=test|hexCoord=506|hexType=4|diceNum=12",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=604",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=4|amount=1|news=Y",
            "all:SOCGameServerText:game=test|text=p3 gets 1 wheat by revealing the fog hex.",
            "all:SOCGameState:game=test|state=10",

            // reveal non-gold hex, player changes afterwards:

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=3|gameState=5",

            "f1:SOCChangeFace:game=test|playerNumber=1|faceId=-1",
            "all:SOCChangeFace:game=test|playerNumber=1|faceId=-1",
            "f2:SOCChangeFace:game=test|playerNumber=2|faceId=-1",
            "all:SOCChangeFace:game=test|playerNumber=2|faceId=-1",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=a06",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=a06",
            "all:SOCGameState:game=test|state=6",

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a road or ship.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=a06",
            "all:SOCRevealFogHex:game=test|hexCoord=908|hexType=5|diceNum=6",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=a06",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=5|amount=1|news=Y",

            "all:SOCGameServerText:game=test|text=p3 gets 1 wood by revealing the fog hex.",
            "all:SOCGameServerText:game=test|text=It's p1's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=1|gameState=5",
            "all:SOCRollDicePrompt:game=test|playerNumber=1",

            // reveal gold hex, current player doesn't change afterwards:

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=3|gameState=5",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=805",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=805",
            "all:SOCGameState:game=test|state=6",

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a road or ship.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=805",
            "all:SOCRevealFogHex:game=test|hexCoord=707|hexType=7|diceNum=8",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=805",
            "all:SOCGameState:game=test|state=14",
            "all:SOCGameServerText:game=test|text=p3 needs to pick resources from the gold hex.",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=1",
            "p3:SOCSimpleRequest:game=test|pn=3|reqType=1|v1=1|v2=0",

            "f3:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=1|wheat=0|wood=0|unknown=0",
            "all:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=1|wheat=0|wood=0|unknown=0|pn=3|reason=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=0",
            "all:SOCGameState:game=test|state=10",

            // reveal gold hex, player changes afterwards:

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=3|gameState=5",

            "f2:SOCChangeFace:game=test|playerNumber=2|faceId=-1",
            "all:SOCChangeFace:game=test|playerNumber=2|faceId=-1",
            "f1:SOCChangeFace:game=test|playerNumber=1|faceId=-1",
            "all:SOCChangeFace:game=test|playerNumber=1|faceId=-1",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=805",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=805",
            "all:SOCGameState:game=test|state=6",

            "all:SOCGameServerText:game=test|text=It's p3's turn to build a road or ship.",
            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=805",
            "all:SOCRevealFogHex:game=test|hexCoord=707|hexType=7|diceNum=10",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=805",
            "all:SOCGameState:game=test|state=14",
            "all:SOCGameServerText:game=test|text=p3 needs to pick resources from the gold hex.",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=1",
            "p3:SOCSimpleRequest:game=test|pn=3|reqType=1|v1=1|v2=0",

            "f3:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=0|wheat=0|wood=1|unknown=0",
            "all:SOCPickResources:game=test|resources=clay=0|ore=0|sheep=0|wheat=0|wood=1|unknown=0|pn=3|reason=3",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=101|amount=0",

            "all:SOCGameServerText:game=test|text=It's p1's turn to build a settlement.",
            "all:SOCTurn:game=test|playerNumber=1|gameState=5",
            "all:SOCRollDicePrompt:game=test|playerNumber=1",
            },
            3, 99,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, 47, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 8 : ((toClientPN == 3) ? 6 : 5), act.eventSequence.size());
                    assertEquals(desc, SOCGame.WAITING_FOR_PICK_GOLD_RESOURCE, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 4, act.param1);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.CHOOSE_FREE_RESOURCES, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, new SOCResourceSet(0, 0, 0, 0, 1, 0), act.rset1);

                    act = actionLog.get(4);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 8 : 7, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " built road", SOCPlayingPiece.ROAD, act.param1);
                    assertEquals(desc + " built at 0x406", 0x406, act.param2);
                    assertEquals(desc + " built by player 3", 3, act.param3);
                    assertEquals(desc + " reveal wood hex from fog", new SOCResourceSet(0, 0, 0, 0, 1, 0), act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(5);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 9 : ((toClientPN == 3) ? 8 : 7), act.eventSequence.size());
                    assertEquals(desc, SOCGame.WAITING_FOR_PICK_GOLD_RESOURCE, act.endingGameState);
                    assertEquals(desc + " built road", SOCPlayingPiece.ROAD, act.param1);
                    assertEquals(desc + " built at 0x708", 0x708, act.param2);
                    assertEquals(desc + " built by player 3", 3, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(6);
                    assertEquals(desc, ActionType.CHOOSE_FREE_RESOURCES, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, new SOCResourceSet(0, 0, 0, 0, 1, 0), act.rset1);

                    act = actionLog.get(7);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);

                    // Move Ship, reveal hex from fog:

                    // reveal non-gold hex

                    act = actionLog.get(8);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(9);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 12, act.param1);

                    act = actionLog.get(10);
                    assertEquals(desc, ActionType.MOVE_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " moved a ship", SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc + " moved from", 0xc0a, act.param2);
                    assertEquals(desc + " moved to", 0xd05, act.param3);
                    assertEquals(desc + " reveal wheat hex from fog", new SOCResourceSet(0, 0, 0, 1, 0, 0), act.rset1);
                    assertNull(act.rset2);

                    // reveal non-gold and gain longest route

                    act = actionLog.get(11);
                    assertEquals(desc, ActionType.MOVE_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " moved a ship", SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc, 0xd05, act.param2);
                    assertEquals(desc, 0xe0b, act.param3);
                    assertEquals(desc + " reveal ore hex from fog", new SOCResourceSet(0, 1, 0, 0, 0, 0), act.rset1);
                    assertNull(act.rset2);

                    // reveal gold

                    act = actionLog.get(12);
                    assertEquals(desc, ActionType.MOVE_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 8 : ((toClientPN == 3) ? 7 : 6), act.eventSequence.size());
                    assertEquals(desc, SOCGame.WAITING_FOR_PICK_GOLD_RESOURCE, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc, 0x70c, act.param2);
                    assertEquals(desc, 0xc0c, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(13);
                    assertEquals(desc, ActionType.CHOOSE_FREE_RESOURCES, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, new SOCResourceSet(0, 0, 0, 1, 0, 0), act.rset1);

                    // reveal gold and gain longest route

                    act = actionLog.get(14);
                    assertEquals(desc, ActionType.MOVE_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 8 : ((toClientPN == 3) ? 7 : 6), act.eventSequence.size());
                    assertEquals(desc, SOCGame.WAITING_FOR_PICK_GOLD_RESOURCE, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc, 0x70c, act.param2);
                    assertEquals(desc, 0xc0c, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(15);
                    assertEquals(desc, ActionType.CHOOSE_FREE_RESOURCES, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, new SOCResourceSet(0, 0, 0, 1, 0, 0), act.rset1);

                    // reveal gold and win by gaining longest route

                    act = actionLog.get(16);
                    assertEquals(desc, ActionType.MOVE_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.OVER, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc, 0x209, act.param2);
                    assertEquals(desc, 0xa0a, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(17);
                    assertEquals(desc, ActionType.GAME_OVER, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 6 : ((toClientPN == 3) ? 5 : 4), act.eventSequence.size());
                    assertEquals(desc + " winning player", 3, act.param1);

                    // Initial Placement: Place settlement, reveal hex from fog:

                    // not gold:

                    act = actionLog.get(18);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 2 : 3, act.eventSequence.size());
                            // observer pn=99 captures 1 more text message from game over into this sequence,
                            // because it doesn't see the SOCPlayerStats after it
                    assertEquals(desc, SOCGame.START1A, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(19);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 9 : 7, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x408", 0x408, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertEquals(new SOCResourceSet(0, 0, 0, 0, 1, 0), act.rset1);
                    assertNull(act.rset2);

                    // 2 non-gold:

                    act = actionLog.get(20);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2A, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(21);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 10 : 9, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x80a", 0x80a, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertEquals(new SOCResourceSet(1, 0, 0, 1, 0, 0), act.rset1);
                    assertNull(act.rset2);

                    // gold:

                    act = actionLog.get(22);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2A, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                    assertEquals(desc + " built at 0x905", 0x905, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(23);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 9 : ((toClientPN == 3) ? 8 : 7), act.eventSequence.size());
                    assertEquals(desc, SOCGame.STARTS_WAITING_FOR_PICK_GOLD_RESOURCE, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x808", 0x808, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(24);
                    assertEquals(desc, ActionType.CHOOSE_FREE_RESOURCES, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2B, act.endingGameState);
                    assertEquals(desc, new SOCResourceSet(1, 0, 0, 0, 0, 0), act.rset1);

                    // 2 gold:

                    act = actionLog.get(25);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1A, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(26);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 9 : ((toClientPN == 3) ? 8 : 7), act.eventSequence.size());
                    assertEquals(desc, SOCGame.STARTS_WAITING_FOR_PICK_GOLD_RESOURCE, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x408", 0x408, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(27);
                    assertEquals(desc, ActionType.CHOOSE_FREE_RESOURCES, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, new SOCResourceSet(0, 0, 1, 1, 0, 0), act.rset1);

                    // 1 gold, 1 non-gold:

                    act = actionLog.get(28);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1A, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(29);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 11 : ((toClientPN == 3) ? 10 : 9), act.eventSequence.size());
                    assertEquals(desc, SOCGame.STARTS_WAITING_FOR_PICK_GOLD_RESOURCE, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x805", 0x805, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertEquals(new SOCResourceSet(0, 0, 1, 0, 0, 0), act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(30);
                    assertEquals(desc, ActionType.CHOOSE_FREE_RESOURCES, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, new SOCResourceSet(0, 0, 0, 1, 0, 0), act.rset1);

                    // Initial Placement tests: Place settlement and ship, reveal hex from fog:

                    // reveal non-gold hex, current player doesn't change afterwards:

                    act = actionLog.get(31);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1A, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(32);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x604", 0x604, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(33);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 8 : 7, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2A, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc + " built at 0x604", 0x604, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertEquals(new SOCResourceSet(0, 0, 0, 1, 0, 0), act.rset1);
                    assertNull(act.rset2);

                    // reveal non-gold hex, player changes afterwards:

                    act = actionLog.get(34);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1A, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(35);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 8 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0xa06", 0xa06, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(36);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc + " built at 0xa06", 0xa06, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertEquals(new SOCResourceSet(0, 0, 0, 0, 1, 0), act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(37);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1A, act.endingGameState);
                    assertEquals(desc, 1, act.param1);

                    // reveal gold hex, current player doesn't change afterwards:

                    act = actionLog.get(38);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1A, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(39);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x805", 0x805, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(40);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 9 : ((toClientPN == 3) ? 8 : 7), act.eventSequence.size());
                    assertEquals(desc, SOCGame.STARTS_WAITING_FOR_PICK_GOLD_RESOURCE, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc + " built at 0x805", 0x805, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(41);
                    assertEquals(desc, ActionType.CHOOSE_FREE_RESOURCES, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START2A, act.endingGameState);
                    assertEquals(desc, new SOCResourceSet(0, 0, 1, 0, 0, 0), act.rset1);

                    // reveal gold hex, player changes afterwards:

                    act = actionLog.get(42);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1A, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(43);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 8 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1B, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x805", 0x805, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(44);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 9 : ((toClientPN == 3) ? 8 : 7), act.eventSequence.size());
                    assertEquals(desc, SOCGame.STARTS_WAITING_FOR_PICK_GOLD_RESOURCE, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc + " built at 0x805", 0x805, act.param2);
                    assertEquals(desc, 3, act.param3);
                    assertNull(act.rset1);
                    assertNull(act.rset2);

                    act = actionLog.get(45);
                    assertEquals(desc, ActionType.CHOOSE_FREE_RESOURCES, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.STARTS_WAITING_FOR_PICK_GOLD_RESOURCE, act.endingGameState);
                    assertEquals(desc, new SOCResourceSet(0, 0, 0, 0, 1, 0), act.rset1);

                    act = actionLog.get(46);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.START1A, act.endingGameState);
                    assertEquals(desc, 1, act.param1);
                }
            });
    }

    /**
     * Test extraction of a turn where cloth is gained during dice roll
     * in the {@link SOCScenario#K_SC_CLVI SC_CLVI} Cloth Trade scenario.
     */
    @Test
    public void testRollGainCloth()
    {
        testExtractEventSequence(new String[]
            {
            // start of turn:
            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            // roll dice: gain cloth from roll 5
            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=5",
            "all:SOCDiceResultResources:game=test|p=1|p=2|p=8|p=2|p=1",
            "p2:SOCPlayerElements:game=test|playerNum=2|actionType=SET|e1=3,e2=1,e3=3,e4=0,e5=1",
            "all:SOCPieceValue:game=test|pieceType=5|coord=a0c|pv1=0|pv2=0",
            "all:SOCPlayerElement:game=test|playerNum=-1|actionType=SET|elementType=106|amount=9",
            "all:SOCPlayerElement:game=test|playerNum=2|actionType=SET|elementType=106|amount=5",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=106|amount=7",
            "all:SOCGameServerText:game=test|text=robot 2 and p3 each received cloth from the villages.",
            "all:SOCGameState:game=test|state=20",

            // end turn:
            "f3:SOCEndTurn:game=test",
            "all:SOCClearOffer:game=test|playerNumber=-1",
            },
            3, 99,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, 4, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc + " new current player number", 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 10 : 8, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc + " dice roll sum", 5, act.param1);
                    // search action's messages for SOCPlayerElement(SET, SCENARIO_CLOTH_COUNT)
                    int foundSetCloth[] = new int[4];
                    for (EventEntry ee : act.eventSequence)
                    {
                        if (! (ee.event instanceof SOCPlayerElement))
                            continue;
                        SOCPlayerElement pe = (SOCPlayerElement) ee.event;
                        if ((pe.getAction() != SOCPlayerElement.SET)
                            && (pe.getElementType() == SOCPlayerElement.PEType.SCENARIO_CLOTH_COUNT.getValue()))
                            continue;
                        int pn = pe.getPlayerNumber();
                        if (pn >= 0)
                            foundSetCloth[pn] = pe.getAmount();
                    }
                    assertEquals(desc + " new cloth total for pn 2", 5, foundSetCloth[2]);
                    assertEquals(desc + " new cloth total for pn 3", 7, foundSetCloth[3]);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                }
            });
    }

    /**
     * Test sequences for various ways to win ({@link ActionType#GAME_OVER}):
     * Building settlement/city, largest army, longest road/route, etc.
     * Some win conditions are also tested in {@link #testTurnWithBuilding()}, {@link #testPlayDevCardRoadBuilding()}.
     * @see #testBasicsNextIfGameStateOrOver()
     */
    @Test
    public void testGameOver()
    {
        testExtractEventSequence(new String[]
            {
            // win by build settlement:

            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=12",
            "all:SOCGameState:game=test|state=20",

            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=72",
            "all:SOCPlayerElements:game=test|playerNum=3|actionType=LOSE|e1=1,e3=1,e4=1,e5=1",
            "all:SOCGameServerText:game=test|text=p3 built a settlement.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=1|coord=72",
            "all:SOCGameElements:game=test|e4=3",
            "all:SOCGameState:game=test|state=1000",

            "all:SOCGameServerText:game=test|text=>>> p3 has won the game with 10 points.",
            "all:SOCGameStats:game=test|0|2|0|10|false|true|false|false",
            "all:SOCGameServerText:game=test|text=This game was 2 rounds, and took 1 minutes 4 seconds.",
            "p3:SOCPlayerStats:game=test|p=1|p=0|p=0|p=0|p=0|p=3",

            // win by upgrade to city:

            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=12",
            "all:SOCGameState:game=test|state=20",

            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=2|coord=b8",
            "all:SOCPlayerElements:game=test|playerNum=3|actionType=LOSE|e2=3,e4=2",
            "all:SOCGameServerText:game=test|text=p3 built a city.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=2|coord=b8",
            "all:SOCGameElements:game=test|e4=3",
            "all:SOCGameState:game=test|state=1000",

            "all:SOCGameServerText:game=test|text=>>> p3 has won the game with 10 points.",
            "all:SOCGameStats:game=test|0|0|2|10|false|false|true|false",
            "all:SOCGameServerText:game=test|text=This game was 6 rounds, and took 1 minutes 41 seconds.",
            "p3:SOCPlayerStats:game=test|p=1|p=5|p=5|p=1|p=2|p=2",

            // win by longest route (build road):

            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=12",
            "all:SOCGameState:game=test|state=20",

            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=87",
            "all:SOCPlayerElements:game=test|playerNum=3|actionType=LOSE|e1=1,e5=1",
            "all:SOCGameServerText:game=test|text=p3 built a road.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=0|coord=87",
            "all:SOCGameElements:game=test|e6=3",
            "all:SOCGameElements:game=test|e4=3",
            "all:SOCGameState:game=test|state=1000",

            "all:SOCGameServerText:game=test|text=>>> p3 has won the game with 11 points.",
            "all:SOCGameStats:game=test|0|2|0|11|false|true|false|false",
            "all:SOCGameServerText:game=test|text=This game was 2 rounds, and took 1 minutes 33 seconds.",
            "p3:SOCPlayerStats:game=test|p=1|p=0|p=0|p=1|p=1|p=0",

            // win by longest route (build ship):

            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=12",
            "all:SOCGameState:game=test|state=20",

            "f3:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=702",
            "all:SOCPlayerElements:game=test|playerNum=3|actionType=LOSE|e3=1,e5=1",
            "all:SOCGameServerText:game=test|text=p3 built a ship.",
            "all:SOCPutPiece:game=test|playerNumber=3|pieceType=3|coord=702",
            "all:SOCGameElements:game=test|e6=3",
            "all:SOCGameElements:game=test|e4=3",
            "all:SOCGameState:game=test|state=1000",

            "all:SOCGameServerText:game=test|text=>>> p3 has won the game with 11 points.",
            "all:SOCGameStats:game=test|0|2|0|11|false|true|false|false",
            "all:SOCGameServerText:game=test|text=This game was 2 rounds, and took 0 minutes 59 seconds.",
            "p3:SOCPlayerStats:game=test|p=1|p=0|p=1|p=0|p=0|p=0",

            // win by largest army (move robber, no victim):

            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            "f3:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=12",
            "all:SOCGameState:game=test|state=20",

            "f3:SOCPlayDevCardRequest:game=test|devCard=9",
            "all:SOCGameServerText:game=test|text=p3 played a Soldier card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=9",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=15|amount=1",
            "all:SOCGameElements:game=test|e5=3",
            "all:SOCGameState:game=test|state=33",

            "all:SOCGameServerText:game=test|text=p3 will move the robber.",
            "f3:SOCMoveRobber:game=test|playerNumber=3|coord=99",
            "all:SOCMoveRobber:game=test|playerNumber=3|coord=99",
            "all:SOCGameServerText:game=test|text=p3 moved the robber.",
            "all:SOCGameElements:game=test|e4=3",
            "all:SOCGameState:game=test|state=1000",

            "all:SOCGameServerText:game=test|text=>>> p3 has won the game with 11 points.",
            "all:SOCGameStats:game=test|0|2|0|11|false|true|false|false",
            "all:SOCGameServerText:game=test|text=This game was 3 rounds, and took 0 minutes 49 seconds.",
            "p3:SOCPlayerStats:game=test|p=1|p=0|p=3|p=0|p=0|p=0",

            // win by largest army (rob victim):

            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            // as part of that win, play soldier card before rolling dice
            "f3:SOCPlayDevCardRequest:game=test|devCard=9",
            "all:SOCGameServerText:game=test|text=p3 played a Soldier card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=9",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=15|amount=1",
            "all:SOCGameElements:game=test|e5=3",
            "all:SOCGameState:game=test|state=33",

            "all:SOCGameServerText:game=test|text=p3 will move the robber.",
            "f3:SOCMoveRobber:game=test|playerNumber=3|coord=79",
            "all:SOCMoveRobber:game=test|playerNumber=3|coord=79",

            "p3:SOCRobberyResult:game=test|perp=3|victim=1|resType=5|amount=1|isGainLose=true",
            "p1:SOCRobberyResult:game=test|perp=3|victim=1|resType=5|amount=1|isGainLose=true",
            "!p[3, 1]:SOCRobberyResult:game=test|perp=3|victim=1|resType=6|amount=1|isGainLose=true",
            "all:SOCGameElements:game=test|e4=3",
            "all:SOCGameState:game=test|state=1000",

            "all:SOCGameServerText:game=test|text=>>> p3 has won the game with 11 points.",
            "all:SOCGameStats:game=test|0|2|0|11|false|true|false|false",
            "all:SOCGameServerText:game=test|text=This game was 4 rounds, and took 1 minutes 16 seconds.",
            "p3:SOCPlayerStats:game=test|p=1|p=0|p=2|p=0|p=1|p=0",

            // win by VP from stealing cloth (SC_CLVI scenario):

            "all:SOCTurn:game=test|playerNumber=3|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=3",

            "f3:SOCPlayDevCardRequest:game=test|devCard=9",
            "all:SOCGameServerText:game=test|text=p3 played a Soldier card.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=PLAY|cardType=9",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=SET|elementType=19|amount=1",
            "all:SOCPlayerElement:game=test|playerNum=3|actionType=GAIN|elementType=15|amount=1",
            "all:SOCGameState:game=test|state=54",

            "all:SOCGameServerText:game=test|text=p3 must choose to move the robber or the pirate.",
            "f3:SOCChoosePlayer:game=test|choice=-3",
            "all:SOCGameState:game=test|state=34",

            "all:SOCGameServerText:game=test|text=p3 will move the pirate ship.",
            "f3:SOCMoveRobber:game=test|playerNumber=3|coord=-b0d",
            "all:SOCMoveRobber:game=test|playerNumber=3|coord=-b0d",
            "all:SOCGameServerText:game=test|text=p3 moved the pirate. Must choose to steal cloth or steal resources.",
            "all:SOCGameState:game=test|state=55",

            "p3:SOCChoosePlayer:game=test|choice=1",
            "f3:SOCChoosePlayer:game=test|choice=-2",

            "all:SOCRobberyResult:game=test|perp=3|victim=1|peType=SCENARIO_CLOTH_COUNT|amount=4|isGainLose=false|victimAmount=2",
            "all:SOCGameElements:game=test|e4=3",
            "all:SOCGameState:game=test|state=1000",

            "all:SOCGameServerText:game=test|text=>>> p3 has won the game with 10 points.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=ADD_OLD|cardType=4",
            "all:SOCGameStats:game=test|0|5|0|10|false|true|false|false",
            "p3:SOCPlayerStats:game=test|p=1|p=0|p=2|p=0|p=0|p=1",

            // win at start of turn after gaining 10 VP on an earlier player's turn:

            "all:SOCTurn:game=test|playerNumber=2|gameState=15",
            "all:SOCRollDicePrompt:game=test|playerNumber=2",

            "f2:SOCRollDice:game=test",
            "all:SOCDiceResult:game=test|param=12",
            "all:SOCGameState:game=test|state=20",

            "f2:SOCEndTurn:game=test",
            "all:SOCClearOffer:game=test|playerNumber=-1",

            "all:SOCTurn:game=test|playerNumber=3|gameState=1000",

            "all:SOCGameServerText:game=test|text=>>> p3 has won the game with 10 points.",
            "all:SOCDevCardAction:game=test|playerNum=3|actionType=ADD_OLD|cardType=4",
            "all:SOCGameStats:game=test|0|2|2|10|false|true|true|false",
            "p3:SOCPlayerStats:game=test|p=1|p=0|p=0|p=5|p=2|p=0",
            },
            3, 99,
            new ExtractResultsChecker()
            {
                public void check(GameActionLog actionLog, int toClientPN)
                {
                    final String desc = "for clientPN=" + toClientPN + ":";

                    assertEquals(desc, (toClientPN != 99) ? 39 : 38, actionLog.size());

                    GameActionLog.Action act = actionLog.get(0);
                    assertEquals(desc, ActionType.LOG_START_TO_STARTGAME, act.actType);
                    assertEquals(desc, EMPTYEVENTLOG_SIZE_TO_STARTGAME, act.eventSequence.size());
                    assertEquals(desc, EMPTYEVENTLOG_STARTGAME_GAME_STATE, act.endingGameState);

                    // win by build settlement:

                    act = actionLog.get(1);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(2);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 12, act.param1);

                    act = actionLog.get(3);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.OVER, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SETTLEMENT, act.param1);
                    assertEquals(desc + " built at 0x72", 0x72, act.param2);
                    assertEquals(desc, 3, act.param3);

                    act = actionLog.get(4);
                    assertEquals(desc, ActionType.GAME_OVER, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 4 : 2, act.eventSequence.size());
                    assertEquals(desc + " winning player", 3, act.param1);

                    // win by upgrade to city:

                    act = actionLog.get(5);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 2 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(6);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 12, act.param1);

                    act = actionLog.get(7);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.OVER, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.CITY, act.param1);
                    assertEquals(desc + " built at 0xb8", 0xb8, act.param2);
                    assertEquals(desc, 3, act.param3);

                    act = actionLog.get(8);
                    assertEquals(desc, ActionType.GAME_OVER, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 4 : 2, act.eventSequence.size());
                    assertEquals(desc + " winning player", 3, act.param1);

                    // win by longest route (build road):

                    act = actionLog.get(9);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 2 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(10);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 12, act.param1);

                    act = actionLog.get(11);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 7 : 6, act.eventSequence.size());
                    assertEquals(desc, SOCGame.OVER, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.ROAD, act.param1);
                    assertEquals(desc + " built at 0x87", 0x87, act.param2);
                    assertEquals(desc, 3, act.param3);

                    act = actionLog.get(12);
                    assertEquals(desc, ActionType.GAME_OVER, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 4 : 2, act.eventSequence.size());
                    assertEquals(desc + " winning player", 3, act.param1);

                    // win by longest route (build ship):

                    act = actionLog.get(13);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 2 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(14);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 12, act.param1);

                    act = actionLog.get(15);
                    assertEquals(desc, ActionType.BUILD_PIECE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 7 : 6, act.eventSequence.size());
                    assertEquals(desc, SOCGame.OVER, act.endingGameState);
                    assertEquals(desc, SOCPlayingPiece.SHIP, act.param1);
                    assertEquals(desc + " built at 0x702", 0x702, act.param2);
                    assertEquals(desc, 3, act.param3);

                    act = actionLog.get(16);
                    assertEquals(desc, ActionType.GAME_OVER, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 4 : 2, act.eventSequence.size());
                    assertEquals(desc + " winning player", 3, act.param1);

                    // win by largest army (move robber, no victim):

                    act = actionLog.get(17);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 2 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(18);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 12, act.param1);

                    act = actionLog.get(19);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 7 : 6, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_ROBBER, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.KNIGHT, act.param1);

                    act = actionLog.get(20);
                    assertEquals(desc, ActionType.MOVE_ROBBER_OR_PIRATE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.OVER, act.endingGameState);
                    assertEquals(desc, 1, act.param1);
                    assertEquals(desc + " moved robber to 0x99", 0x99, act.param2);

                    act = actionLog.get(21);
                    assertEquals(desc, ActionType.GAME_OVER, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 4 : 2, act.eventSequence.size());
                    assertEquals(desc + " winning player", 3, act.param1);

                    // win by largest army (rob victim):

                    act = actionLog.get(22);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 2 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(23);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 7 : 6, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_ROBBER, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.KNIGHT, act.param1);

                    act = actionLog.get(24);
                    assertEquals(desc, ActionType.MOVE_ROBBER_OR_PIRATE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_ROBBER, act.endingGameState);
                    assertEquals(desc, 1, act.param1);
                    assertEquals(desc + " moved robber to 0x79", 0x79, act.param2);

                    act = actionLog.get(25);
                    assertEquals(desc, ActionType.ROB_PLAYER, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.OVER, act.endingGameState);
                    assertEquals(desc, 1, act.param1);
                    assertEquals(desc,
                        new SOCResourceSet(0, 0, 0, 0, (toClientPN != 99) ? 1 : 0, (toClientPN != 99) ? 0 : 1),
                        act.rset1);

                    act = actionLog.get(26);
                    assertEquals(desc, ActionType.GAME_OVER, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 4 : 2, act.eventSequence.size());
                    assertEquals(desc + " winning player", 3, act.param1);

                    // win by VP from stealing cloth (SC_CLVI scenario):

                    act = actionLog.get(27);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 2 : 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 3, act.param1);

                    act = actionLog.get(28);
                    assertEquals(desc, ActionType.PLAY_DEV_CARD, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 6 : 5, act.eventSequence.size());
                    assertEquals(desc, SOCGame.WAITING_FOR_ROBBER_OR_PIRATE, act.endingGameState);
                    assertEquals(desc, SOCDevCardConstants.KNIGHT, act.param1);

                    act = actionLog.get(29);
                    assertEquals(desc, ActionType.CHOOSE_MOVE_ROBBER_OR_PIRATE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLACING_PIRATE, act.endingGameState);
                    assertEquals(desc + " chose pirate", 2, act.param1);

                    act = actionLog.get(30);
                    assertEquals(desc, ActionType.MOVE_ROBBER_OR_PIRATE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 5 : 4, act.eventSequence.size());
                    assertEquals(desc, SOCGame.WAITING_FOR_ROB_CLOTH_OR_RESOURCE, act.endingGameState);
                    assertEquals(desc, 2, act.param1);
                    assertEquals(desc + " moved pirate to 0xb0d", 0xb0d, act.param2);

                    int idx = 31;  // observer doesn't see CHOOSE_ROB_CLOTH_OR_RESOURCE
                    if (toClientPN != 99)
                    {
                        act = actionLog.get(idx);
                        assertEquals(desc, ActionType.CHOOSE_ROB_CLOTH_OR_RESOURCE, act.actType);
                        assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                        assertEquals(desc, SOCGame.WAITING_FOR_ROB_CLOTH_OR_RESOURCE, act.endingGameState);
                        assertEquals(desc, (toClientPN == -1) ? 2 : 0, act.param1);
                        ++idx;
                    }

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.ROB_PLAYER, act.actType);
                    assertEquals(desc, 3, act.eventSequence.size());
                    assertEquals(desc, SOCGame.OVER, act.endingGameState);
                    assertNull(desc, act.rset1);
                    assertEquals(desc, 1, act.param1);
                    assertEquals(desc + " steal cloth", SOCPlayerElement.PEType.SCENARIO_CLOTH_COUNT.getValue(), act.param2);
                    ++idx;

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.GAME_OVER, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc + " winning player", 3, act.param1);
                    ++idx;

                    // win at start of turn after gaining 10 VP on an earlier player's turn:

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.ROLL_OR_CARD, act.endingGameState);
                    assertEquals(desc, 2, act.param1);
                    ++idx;

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.ROLL_DICE, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 3 : 2, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    assertEquals(desc, 12, act.param1);
                    ++idx;

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.END_TURN, act.actType);
                    assertEquals(desc, (toClientPN == -1) ? 2 : 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.PLAY1, act.endingGameState);
                    ++idx;

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.TURN_BEGINS, act.actType);
                    assertEquals(desc, 1, act.eventSequence.size());
                    assertEquals(desc, SOCGame.OVER, act.endingGameState);
                    assertEquals(desc, 3, act.param1);
                    ++idx;

                    act = actionLog.get(idx);
                    assertEquals(desc, ActionType.GAME_OVER, act.actType);
                    assertEquals(desc, (toClientPN != 99) ? 4 : 3, act.eventSequence.size());
                    assertEquals(desc + " winning player", 3, act.param1);
                    ++idx;
                }
            });
    }

    /**
     * Test extraction from a sequence from full event log (for server), optionally from server-only log
     * for a client player number or two. After testing, restores event log position to where it was at start of test.
     * Creates and uses new {@link GameActionExtractor}s.
     *
     * @param events  Event sequence to check; will call {@link EventEntry#parse(String)} on each
     * @param testToClientPN  Client player number to filter logs to, or -1 if none
     * @param testToOtherPN  Other client player number, or -1 if none; instead of
     *     {@link soc.server.SOCServer#PN_OBSERVER}, use {@code 99} here because extractor's PN must be &gt;= 0
     * @param checker  Test code to call for each test
     */
    protected void testExtractEventSequence
        (final String[] events, final int testToClientPN, int testToOtherPN,
         final ExtractResultsChecker checker)
    {
        // note event-log position before starting
        ExtractorState prevState = new ExtractorState(state);

        // parse and add to event log
        final List<EventEntry> eventEntries = eventLog.entries;
        addEventLogEntries(eventEntries, events);

        // test for server
        final GameActionLog actionLog = extract();
        assertEquals("at end of event log", eventEntries.size(), state.nextLogIndex);
        assertNull(next());  // at end of log again
        assertNotNull(actionLog);
        checker.check(actionLog, -1);

        // for clientPN
        if (testToClientPN != -1)
        {
            final GameEventLog clientEventLog = new GameEventLog(eventLog, testToClientPN);
            assertEquals(testToClientPN, clientEventLog.atClientPN);
            GameActionExtractor ext = new GameActionExtractor(clientEventLog, true);
            GameActionLog clientActLog = ext.extract();
            assertNotNull(clientActLog);
            checker.check(clientActLog, testToClientPN);
        }

        // for otherPN
        if (testToOtherPN != -1)
        {
            final GameEventLog clientEventLog = new GameEventLog(eventLog, testToOtherPN);
            assertEquals(testToOtherPN, clientEventLog.atClientPN);
            GameActionExtractor ext = new GameActionExtractor(clientEventLog, true);
            GameActionLog clientActLog = ext.extract();
            assertNotNull(clientActLog);
            checker.check(clientActLog, testToOtherPN);
        }

        backtrackTo(prevState);
    }

    /**
     * Callback {@link #check(GameActionLog, int)} to check results from an extracted message sequence
     * from {@link TestGameActionExtractor#testExtractEventSequence(String[], int, int, ExtractResultsChecker)}.
     */
    public interface ExtractResultsChecker
    {
        /**
         * Check contents of {@code actionLog} after extracting the {@link GameEventLog} sequence being checked
         * for the server or for a client player.
         * Should call assert methods.
         * @param actionLog  Extracted actions to check; not {@code null}
         * @param toClientPN  -1 if testing at server, or the client player number being tested,
         *     from {@link GameEventLog#atClientPN}; can be {@link soc.server.SOCServer#PN_OBSERVER}
         */
        public void check(final GameActionLog actionLog, final int toClientPN);
    }

}
