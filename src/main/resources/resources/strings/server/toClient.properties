# JSettlers i18n localization strings: At Server to send to Client.
#  This file is part of Java Settlers - An online multiplayer version of the game Settlers of Catan
#
# This file Copyright (C) 2013-2023 Jeremy D Monin <jeremy@nand.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/ .


# Reminders about .properties filenames and format:
# - For a locale, the filename is bundlename_lang.properties or (more specific) bundlename_lang_COUNTRY.properties,
#    where lang and country are 2 or 3 characters each.  Keys not found there must be in bundlename.properties.
# - Logically related keys are grouped together in the files, with blank lines separating the groups.
#    Keys within a group might be alphabetical or chronological (based on usual game play).  The groups are ordered
#    in the file with common groups first, then mostly chronologically, then rarely used groups near the end of the file.  
# - Key names are case-sensitive; jsettlers uses mostly-lowercase alphanumeric keys, and "." to organize keys into hierarchies.
# - Keys about game options and scenarios should contain their name (.sc_piri., etc)
# - Keys which should not be localized must contain _nolocaliz
# - Parsing a key = value pair, the whitespace around "=" is stripped, but a value's trailing whitespace is kept.  If a
#    value begins with whitespace, use backslash to escape that.  For more info see the java.util.Properties.load javadoc.
#    Best practice in jsettlers is to not use leading or trailing whitespace unless unavoidable, and always comment the
#    reason in the java code and above the properties key-value pair.
# - Backslashes must be doubled.  Tab, newline and carriage return are encoded as in Java strings (backslash-t, backslash-n, etc)
# - Don't use key:value format or continuation lines (ending with backslash), although java properties files allow them,
#    in order to simplify assumptions when parsing.
# - The encoding must be ISO-8859-1, not UTF-8; see the java.util.Properties javadoc for details.
#
# Reminders about the format used for text with arguments by SOCStringManager.get and MessageFormat.format:
# - When a string has arguments:
#     - Argument numbers start at 0: It''s {0}''s turn to roll the dice.
#     - Arguments can have a format type: {0} rolled a {1,number}.  See java.text.MessageFormat javadoc.
#     - Single-quote characters must be doubled: ''
#     - Left curly brackets must be single-quoted: '{'
#     - JSettlers has special types parsed by SOCStringManager.getSpecial, see its javadoc: {0,list}, {0,rsrcs}, etc
# - If the string has no arguments and won't go through MessageFormat.format,
#   shouldn't quote { brackets or double single-quotes.

# Initial connection to server:

# Client version number too old. {0} = their version("1.1.04"); {1} = required ("1.1.05"); {2} = required as number (1105).
# Version number format {2,number,#} avoids automatic thousands separator: want "1105" not "1,105" here
connect.reject.client_version = Sorry, your client version {0} is too old: Version {1} ({2,number,#}) or above is required.

# Game basics:

base.emptylist.nothing = nothing
base.reply.not.your.turn = It's not your turn.

resources.clay = Clay
resources.ore = Ore
resources.sheep = Sheep
resources.wheat = Wheat
resources.wood = Wood

# spec.* is for SOCStringManager.getSpecial; this section must be identical in the client and server string properties files

# spec.rsrcs.* is for {#,rsrcs}
spec.rsrcs.aclay = a clay
spec.rsrcs.aore = an ore
spec.rsrcs.asheep = a sheep
spec.rsrcs.awheat = a wheat
spec.rsrcs.awood = a wood
spec.rsrcs.aunknown = a resource of unknown type {0}
spec.rsrcs.1clay = 1 clay
spec.rsrcs.1ore = 1 ore
spec.rsrcs.1sheep = 1 sheep
spec.rsrcs.1wheat = 1 wheat
spec.rsrcs.1wood = 1 wood
spec.rsrcs.1unknown = 1 resource of unknown type {0}
spec.rsrcs.nclay = {0,number} clay
spec.rsrcs.nore = {0,number} ore
spec.rsrcs.nsheep = {0,number} sheep
spec.rsrcs.nwheat = {0,number} wheat
spec.rsrcs.nwood = {0,number} wood
spec.rsrcs.nunknown = {0,number} resources of unknown type {1}
spec.rsrcs.none = nothing
# For plural forms: Joe monopolized clay / monopolizó la madera
spec.rsrcs.clay = clay
spec.rsrcs.ore = ore
spec.rsrcs.sheep = sheep
spec.rsrcs.wheat = wheat
spec.rsrcs.wood = wood
spec.rsrcs.unknown = resources of unknown type {0}

# spec.dcards.* is for {#,dcards}
#   These are used in SOCDevCard.getCardTypeName, and its server callers messageToGameKeyedSpecial and messageToPlayerKeyedSpecial
spec.dcards.unknown = unknown card
spec.dcards.capgovhouse = Gov. House (1VP)
spec.dcards.discoveryplenty = Year of Plenty
spec.dcards.knightsoldier = Soldier
spec.dcards.knightsoldier.warship = Warship
spec.dcards.market = Market (1VP)
spec.dcards.monopoly = Monopoly
spec.dcards.roadbuilding = Road Building
spec.dcards.temple = Temple (1VP)
spec.dcards.towerchapel = Chapel (1VP)
spec.dcards.university = University (1VP)
spec.dcards.aunknown = an unknown card
spec.dcards.acapgovhouse = a Gov.House (+1VP)
spec.dcards.adiscoveryplenty = a Year of Plenty
spec.dcards.aknightsoldier = a Soldier
spec.dcards.aknightsoldier.warship = a Warship
spec.dcards.amarket = a Market (+1VP)
spec.dcards.amonopoly = a Monopoly
spec.dcards.aroadbuilding = a Road Building
spec.dcards.atemple = a Temple (+1VP)
spec.dcards.atowerchapel = a Chapel (+1VP)
spec.dcards.auniversity = a University (+1VP)

# i18n.duration.* for I18n.durationToDaysHoursMinutesSeconds; this section must be identical in the client and server string properties files
i18n.duration.days_hours_min_sec = {0,number} {0,choice,1#day|1<days} {1,number}:{2,number,00}:{3,number,00}
i18n.duration.hours_min_sec = {0,number}:{1,number,00}:{2,number,00}

# i18n.listitems.* for I18n.listItems; this section must be identical in the client and server string properties files
# i18n.listitems.item should have a trailing space to make room before the next item, if the language uses spaces
i18n.listitems.nothing = nothing
i18n.listitems.2 = {0} and {1}
i18n.listitems.item = {0}, 
i18n.listitems.finalitem = and {0}

# This section (game.invitem.unknown - game.aport.generic) is needed at both client and server
# for SOCInventoryItem / SOCStringManager.
game.invitem.unknown = Unknown item
game.aninvitem.unknown = An unknown item
game.port.three=3:1 Port
game.port.clay=2:1 Clay port
game.port.ore=2:1 Ore port
game.port.sheep=2:1 Sheep port
game.port.wheat=2:1 Wheat port
game.port.wood=2:1 Wood port
# Just in case, {1}: ID
game.port.generic=Port type {0}
game.aport.three = a 3:1 port
game.aport.clay = a 2:1 clay port
game.aport.ore = a 2:1 ore port
game.aport.sheep = a 2:1 sheep port
game.aport.wheat = a 2:1 wheat port
game.aport.wood = a 2:1 wood port
game.aport.generic = a port of type {0}

game.playername.gets.resources.common = {0} gets {1,rsrcs}.

game.time.expire.deleted = >>> The time limit on this game has expired, it will now be deleted.
game.time.expire.soon.addtime = >>> Less than {0,number} minutes remaining. Type *ADDTIME* to extend this game another 30 minutes.

# SOCGameOption descriptive names, in same order as SOCGameOptionSet.getAllKnownOptions(). Hidden options aren't included.
#     Key names are all-caps to match SOCGameOption keys. When client asks server for localized names,
#     server looks for gameopt.PL to see if any exist in the client's locale.
gameopt.PL = Maximum # players
gameopt.PLB = Use 6-player board
gameopt.PLP = 6-player board: Can Special Build only if 5 or 6 players in game
gameopt.PLAY_FO = Show all player info and resources
gameopt.PLAY_VPO = Show all VP/dev card info
gameopt.SBL = Use sea board
gameopt.RD = Robber can't return to the desert
gameopt.N7 = Roll no 7s during first # rounds
gameopt.N7C = Roll no 7s until a city is built
gameopt.BC = Break up clumps of # or more same-type hexes/ports
gameopt.NT = No trading allowed between players
gameopt.VP = Victory points to win: #
gameopt._VP_ALL = Use default VP in all scenarios
gameopt.SC = Game Scenario: #
gameopt.UB = Allow undo piece builds and moves
gameopt.UBL = Limit undos to # per player
# Scenario game option names:
#    At the client, NewGameOptionsFrame.showScenarioInfoDialog() assumes scenario game options
#    all start with the text "Scenarios:". When localizing, be sure to keep a consistent prefix
#    that showScenarioInfoDialog() knows to look for.  In the client's localized strings, the
#    key game.options.scenario.optprefix should have this prefix as its value.
#    See also gamescen.*
gameopt._SC_SANY = Scenarios: SVP for your first settlement on any island after initial placement
gameopt._SC_SEAC = Scenarios: 2 SVP for your first settlement on each island after initial placement
gameopt._SC_FOG = Scenarios: Some hexes initially hidden by fog
gameopt._SC_0RVP = Scenarios: No longest trade route VP (no Longest Road)
gameopt._SC_3IP = Scenarios: Third initial settlement
gameopt._SC_CLVI = Scenarios: Cloth Trade with neutral villages
gameopt._SC_PIRI = Scenarios: Pirate Islands and fortresses
gameopt._SC_FTRI = Scenarios: The Forgotten Tribe
gameopt._SC_WOND = Scenarios: Wonders

# Game scenario names and descriptions:
#    Key names are all-caps to match SOCScenario keys;
#    suffixes are .n for scenario name, .d for description. Not all scenarios have a description.
#    The en_US strings must match the name and description in SOCScenario.initAllScenarios().
#    When client needs localized names, server looks for gamescen.SC_WOND.n to see if any exist in the client's locale.
#    See also gameopt._SC_*
gamescen.SC_4ISL.n = The Four Islands
gamescen.SC_4ISL.d = Start on one or two islands. Explore and gain SVP by building to others.
gamescen.SC_CLVI.n = Cloth Trade with neutral villages
gamescen.SC_CLVI.d = The small islands' villages give you Cloth; every 2 cloth you have is 1 extra Victory Point. To gain cloth, build ships to a village. You can't move the pirate until you've reached a village. Each player to reach a village gets 1 of its cloth at that time, and 1 more whenever its number is rolled, until the village runs out. Pirate can steal cloth or resources. If fewer than 4 villages still have cloth, the game ends and the player with the most VP wins. (If tied, player with most cloth wins.)
gamescen.SC_FOG.n = Fog Islands
gamescen.SC_FOG.d = Some hexes are initially hidden by fog. When you build a ship or road to a foggy hex, that hex is revealed. Unless it's water, you are given its resource as a reward.
gamescen.SC_FTRI.n = The Forgotten Tribe
gamescen.SC_FTRI.d = Far areas of the board have small habitations of a "forgotten tribe" of settlers. When players build ships to reach them, they are greeted with "gifts" of a development card, Special Victory Point, or a Port given to the player which must be moved adjacent to one of their coastal settlements/cities if possible, or set aside to place later.
gamescen.SC_NSHO.n = New Shores
gamescen.SC_PIRI.n = Pirate Islands and Fortresses
gamescen.SC_PIRI.d = A pirate fleet patrols, attacking to steal resources from weak players with adjacent settlements/cities until the player builds a strong fleet of Warships. Build ships directly to the Fortress of your color, which the pirates have captured from you. Ship routes can't branch out, only follow dotted lines to the Fortress. Strengthen your fleet by playing Warship development cards to upgrade your ships. When the pirate fleet attacks, you win if you have more Warships than the pirate fleet strength (randomly 1-6). To win the game, you must reach the victory point goal and defeat the Fortress 3 times using warships. No robber or largest army. When 7 is rolled, any pirate fleet attack happens before the usual discards.
gamescen.SC_TTD.n = Through The Desert
gamescen.SC_TTD.d = Start on the main island. Explore and gain SVP by building to the small islands, or through the desert to the coast.
gamescen.SC_WOND.n = Wonders
gamescen.SC_WOND.d = Each player chooses a unique Wonder and can build all 4 of its levels. Each Wonder has its own requirements before you may start it, such as several cities built or a port at a certain location. To win you must complete your Wonder's 4 levels, or reach 10 VP and complete more levels than any other player. Has no pirate ship.

# recent-chat recap when joining a game or a chat channel
member.join.recap_begin = Recap of recent chat ::
member.join.recap_end = Recap ends ::

# messages for joining/sitting/leaving a game
member.bot.join.cantfind=*** Can't find a robot! ***
member.bot.join.fetching=Fetching a robot player...
member.bot.join.interror.version_nolocaliz=Internal error: The robots can''t join this game; game''s version {0} is newer than the robots.
member.bot.join.no.bots.server=No robot can join the game, there are no robots on this server.
member.chat.not_observers = Observers can't chat during the game.
member.join.game.started = This game has started; no new players can sit down.
member.join.game.started.bots = This game has started. To play, take over a robot.
member.left.game={0} left the game.
member.sit.game.full = This game is full; you cannot sit down.
member.sit.game.started = This game has already started; to play you must take over a robot.
member.sit.not.here = You cannot sit down here.

prompt.turn.to.build.road=It''s {0}''s turn to build a road.
prompt.turn.to.build.road.or.ship=It''s {0}''s turn to build a road or ship.
prompt.turn.to.build.stlmt=It''s {0}''s turn to build a settlement.
prompt.discard.1={0} needs to discard.
prompt.discard.n={0,list} need to discard.
prompt.gameopt._SC_3IP.part1=This scenario gives you 3 initial settlements and roads.
prompt.gameopt._SC_3IP.part2=Your free resources will be from the third settlement.
prompt.pick.gold.1={0} needs to pick resources from the gold hex.
prompt.pick.gold.n={0,list} need to pick resources from the gold hex.

buy.dev.cards.cannot_now = You can't buy a development card now.
buy.dev.cards.none.common = No more development cards available to buy

# Game expiration time; see also stats.game.willexpire.*
reply.addtime.extended = >>> Game time has been extended.
reply.addtime.game_over = This game is over, cannot extend its time.
reply.addtime.not_expire_soon = Ask again later: This game does not expire soon, it has {0,number} minutes remaining.
reply.addtime.practice.never = >>> Practice games never expire.
reply.common.cannot.at_that_location = You can't do that at that location.
reply.common.cannot.in_this_game = You can't do that in this game.
reply.common.cannot.right_now = You can't do that right now.
reply.common.trade.cannot_make = You can't make that trade.
reply.endturn.cannot = You can't end your turn yet.
reply.game.not.found = Game not found.
reply.game_members.of = Members of game {0}:
reply.game_members.this = This game's members:
reply.lock.cannot = Cannot set that lock right now.
reply.must_be_admin.view = Must be an administrator to view that.
reply.movepiece.cannot.now.ship = You can't move that ship now.
reply.pick.gold.cannot.that_many = You can't pick that many resources.
reply.piece.type.unknown = Unknown piece type.
reply.placeitem.cancel = {0} canceled placement of a special item.
reply.placeitem.cancel.cannot = Cannot cancel item placement.
reply.playdevcard.cannot.now = You can''t play {0,dcards} card now.
reply.playdevcard.type.unknown = That card type is unknown.
reply.rolldice.cannot.now = You can't roll right now.
# replies for *WHO* command: number of unnamed connections can be less than 0 because of bugs;
# MessageFormat ,choice, allows 0< for a lower-bound default to handle 0 and negative numbers.
reply.who.and_unnamed = and {0,choice, 0<{0,number} unnamed connections|1#1 unnamed connection|1<{0,number} unnamed connections}
reply.who.conn_to_srv = Currently connected to server:

start.no.robots.on.server = No robots on this server; please fill at least {0,number} seats before starting.
start.not.enough.robots = Not enough robots to fill all the seats. Only {0,choice, 1#1 robot is|1<{0,number} robots are} available.
start.not.enough.robots.lock = Not enough robots to fill all the seats. Lock some seats. Only {0,choice, 1#1 robot is|1<{0,number} robots are} available.
start.only.cannot.lock.all = The only player cannot lock all seats. To start the game, other players or robots must join.
start.picking.random.starting.player = Randomly picking a starting player...
start.player.must.sit = To start the game, at least one player must sit down.
start.robots.cannot.join.options = Sorry, robots cannot join this game because of its options.
start.robots.cannot.join.problem = Sorry, robots cannot join this game: {0}
start.to.start.without.robots = To start the game without robots, lock all empty seats.

action.build.cannot.now = You can't build now.
action.build.cannot.now.ask = You can't ask to build now.
action.build.cannot.now.city = You can't build a city now.
action.build.cannot.now.road = You can't build a road now.
action.build.cannot.now.ship = You can't build a ship now.
action.build.cannot.now.stlmt = You can't build a settlement now.
action.build.cannot.there.city = You can't build a city there.
action.build.cannot.there.road = You can't build a road there.
action.build.cannot.there.ship = You can't build a ship there.
action.build.cannot.there.stlmt = You can't build a settlement there.
action.build.cannot.special.PLP.common = House rule: Special Building phase requires 5 or 6 players.
action.built.city={0} built a city.
action.built.road={0} built a road.
action.built.ship={0} built a ship.
action.built.stlmt={0} built a settlement.
action.built.stlmt.cancel={0} cancelled this settlement placement.
# these "didn't build" messages would be sent only to buggy clients, aren't worth localizing.
action.build.didnt.city._nolocaliz = You didn't buy a city.
action.build.didnt.road._nolocaliz = You didn't buy a road.
action.build.didnt.ship._nolocaliz = You didn't buy a ship.
action.build.didnt.stlmt._nolocaliz = You didn't buy a settlement.
action.built.nextturn.7.houserule=Starting next turn, dice rolls of 7 may occur (house rule).
action.built.sc_ftri.dev={0} gets a Development Card as a gift from the Forgotten Tribe.
action.card.discoveryplenty={0} played a Year of Plenty card.
action.card.discov.cancel={0} cancelled the Year of Plenty card.
# Discovery/Year of Plenty pick: This string is at client and server
action.card.discov.received={0} received {1,rsrcs} from the bank.
action.card.discov.notlegal=That is not a legal Year of Plenty pick.
action.card.mono={0} played a Monopoly card.
action.card.mono.cancel={0} cancelled the Monopoly card.
action.card.roadbuilding={0} played a Road Building card.
action.card.roadbuilding.cancel={0} cancelled the Road Building card.
action.card.roadbuilding.skip.r={0} skipped placing the second road.
action.card.roadbuilding.skip.s={0} skipped placing the second ship.
action.card.road.place.1r=You may place your 1 remaining road.
action.card.road.place.1s=You may place your 1 remaining road or ship.
action.card.road.place.2r=You may place 2 roads.
action.card.road.place.2s=You may place 2 roads/ships.
action.card.soldier={0} played a Soldier card.
action.card.soldier.cancel={0} cancelled the Soldier card.
action.card.soldier.warship={0} converted a ship to a warship.
action.card.play.cancel={0} cancelled the development card.
# this "can't cancel" message would be sent only to buggy clients, not worth localizing
action.card.play.cancel.cant._nolocaliz = Can't cancel that development card now.
action.discarded.total.common={0} discarded {1,number} resources.
# monopoly; see also client strings game.action.mono.monopolized, game.action.mono.you.monopolized
action.mono.took.your.1={0}''s Monopoly took your {1,rsrcs}.
action.mono.took.your.n={0}''s Monopoly took your {1,rsrcs}.
# Gold Hex picks; these strings are at client and server
action.picked.rsrcs={0} has picked {1,rsrcs}.
action.picked.rsrcs.goldhex={0} has picked {1,rsrcs} from the gold hex.
action.rolled.no_other_player_gets.anything=No other player gets anything.
action.rolled.no_other_player_gets.resources=No other player gets resources.
action.rolled.no_player_gets.anything=No player gets anything.
action.rolled.no_player_gets.resources=No player gets resources.
action.rolled.sc_clvi.received.cloth.1={0} received {1} cloth from the villages.
# Player(s) may receive cloth from multiple villages; this message omits each player's cloth amounts
action.rolled.sc_clvi.received.cloth.n={0,list} each received cloth from the villages.
# SC_PIRI pirate fleet attacks; should have the same text in client and server properties files
action.rolled.sc_piri.player.lost.rsrcs.to.fleet={0} lost {1,choice, 1#1 resource|1<{1,number} resources} to pirate fleet attack (strength {2,number}).
action.rolled.sc_piri.player.tied={0} tied against the pirate fleet (strength {1,number}).
action.rolled.sc_piri.player.won.pick.free={0} won against the pirate fleet (strength {1,number}) and will pick a free resource.
action.rolled.sc_piri.you.lost.rsrcs.to.fleet=You lost {0,rsrcs} to the pirate fleet (strength {1,number}).
action.sbp.turn.to.place.common = Special building phase: {0}''s turn to place.

forceend.devcard.returned = {0}''s just-played development card was returned.

robber.cantmove=You can't move the robber.
robber.cantmove.pirate=You can't move the pirate.
robber.cantsteal=You can't steal from that player.
robber.declined={0} declined to steal.
robber.moved.choose.cloth.rsrcs={0} moved the pirate, must choose to steal cloth or steal resources from {1}.
robber.willmove={0} will move the robber.
robber.willmove.choose={0} must choose to move the robber or the pirate.
robber.willmove.pirate={0} will move the pirate ship.
# robber.common.* are used at the client and server,
# and should have the same text in client and server properties files.
robber.common.stole.cloth.from={0} stole a cloth from {1}.
robber.common.stole.resource.from={0} stole a resource from {1}.
robber.common.stole.resource.from.n={0} stole {2,number} resources from {1}.
robber.common.stole.resource.from.you={0} stole {1,rsrcs} from you.
robber.common.you.stole.resource.from=You stole {0,rsrcs} from {2}.
# robber or pirate moved: {0} = player, {1} = 1 the robber, 2 the pirate
robberpirate.moved={0} moved {1,choice, 1#the robber|2#the pirate}.
robberpirate.moved.choose.cloth.rsrcs={0} moved {1,choice, 1#the robber|2#the pirate}. Must choose to steal cloth or steal resources.
robberpirate.moved.choose.victim={0} moved {1,choice, 1#the robber|2#the pirate}. Must choose a victim.

event.fog.reveal = {0} gets {1,rsrcs} by revealing the fog hex.
event.sc_clvi.established = {0} established a trade route with a village.
event.sc_clvi.game.ending.villages = Game is ending: Fewer than 4 villages still have cloth.
event.sc_clvi.not.prevented.pirate = You are no longer prevented from moving the pirate ship.
event.sc_piri.fleet.defeated = All pirate fortresses have been recaptured, the pirate fleet is defeated.
event.won.special.cond = {0} has won due to this special win condition.

# event.svp.* are for SOCSVPTextMessage descriptions.
event.svp.sc_ftri.gift = a gift from the Forgotten Tribe
event.svp.sc_sany.area = growing past the starting area
event.svp.sc_sany.island = growing past the main island
event.svp.sc_seac.area = settling a new area
event.svp.sc_seac.island = settling a new island

resetboard.doit.announce.playerwholeft=>>> Game {0} board reset by a player who left
resetboard.doit.announce.requester=>>> Game {0} board reset by {1}
resetboard.doit.interror=>>> Internal error, Game {0} board reset failed
resetboard.request.everyone.left=>>> Everyone has left this game. Please start a new game with players or bots.
resetboard.request.unlock.bot=Please unlock at least one bot, so you will have an opponent.
resetboard.vote.request={0} requests a board reset - Other players, please vote.
resetboard.vote.request.alloldcli=>>> {0} is resetting the game - other connected players are unable to vote (client too old).

stats.game.title=-- Game statistics: --
stats.game.rounds=Rounds played: {0,number}
stats.game.startedago=This game started {0,number} minutes ago.
stats.game.was.minutes=This game took {0,number} minutes.
stats.game.was.minutessec=This game took {0,number} minutes {1,choice, 1#1 second|1<{1,number} seconds}.
stats.game.was.roundsminutes=This game was {0,number} rounds, and took {1,number} minutes.
stats.game.was.roundsminutessec=This game was {0,number} rounds, and took {1,number} minutes {2,choice, 1#1 second|1<{2,number} seconds}.
# Game expiration time; see also reply.addtime.*
stats.game.willexpire=This game will expire in {0,number} minutes.
stats.game.willexpire.urgent=>>> This game will expire in {0,number} minutes.
stats.game.winner.withpoints=>>> {0} has won the game with {1,number} points.
stats.cli.connected.minutes=You have been connected {0,number} minutes.
stats.cli.connected.minutes.prac=You have been practicing {0,number} minutes.
stats.cli.winloss.lost=You have lost {0,choice, 1#1 game|1<{0,number} games} since connecting.
stats.cli.winloss.won=You have won {0,choice, 1#1 game|1<{0,number} games} since connecting.
stats.cli.winloss.wonlost=You have won {0,choice, 1#1 game|1<{0,number} games} and lost {1,choice, 1#1 game|1<{1,number} games} since connecting.

debug.dev.gets = ### {0} gets {1,dcards} card.
debug.devnext.set = ### Next dev card is set to {0,dcards}.

# For SOCAccountClient:
account.create.already_exists = The nickname "{0}" is already in use.
account.create.client_version_minimum = To create accounts, use client version {0} or newer.
account.create.created = Account created for "{0}".
account.create.error = Account not created due to error.
account.create.error_db_conn = Problem connecting to database, please try again later.
account.create.not_auth = Your account is not authorized to create accounts.
# account.common.* are error messages at the client or server,
# and should have the same text in client and server properties files.
account.common.must_auth = You must log in with a username and password before you can create accounts.
account.common.no_accts = This server does not use accounts and passwords.
account.common.password_too_long = That password is too long.

# Status message text (SOCStatusMessage)
# SV_PW_WRONG
netmsg.status.incorrect_password = Incorrect password for "{0}".
# SV_NEWCHANNEL_TOO_MANY_CREATED
netmsg.status.newchannel_too_many_created = Too many of your chat channels still active; maximum: {0}
# SV_NEWGAME_TOO_MANY_CREATED
netmsg.status.newgame_too_many_created = Too many of your games still active; maximum: {0}
# SV_NAME_NOT_ALLOWED
netmsg.status.nickname_not_allowed = This nickname is not allowed.
# SV_OK, SV_OK_SET_NICKNAME
#     To avoid parsing problems, this text sent for SV_OK must not start with a digit or comma or contain '|'
netmsg.status.welcome = Welcome to Java Settlers of Catan!
# Prefix to warn that debug mode is on. For v1.x clients, the english debug welcome must contain the word "debug".
netmsg.status.welcome.debug = Debugging is On.
# netmsg.status.common.* are used at server and client, text must be identical at both.
# SV_NEWGAME_ALREADY_EXISTS
netmsg.status.common.newgame_already_exists = A game with this name already exists, please choose a different name.
# SV_NEWGAME_NAME_REJECTED
netmsg.status.common.newgame_name_rejected = This name is not permitted, please choose a different name.
netmsg.status.common.newgame_name_rejected_digits_or_punct = A name with only digits or punctuation is not permitted, please add a letter.
# SV_NAME_TOO_LONG
netmsg.status.common.name_too_long = Please choose a shorter name; maximum length: {0}

# Do not translate from English; sent to old clients only on dice roll; v2.0.00+ clients get i18n-neutral resource data instead
_nolocaliz.roll.gets.resources={0} gets {1,rsrcs}.

# Admin commands
admin.loadgame.resp.usage = Usage: *LOADGAME* gamename
admin.loadgame.err.append__see_console = : See server console
admin.loadgame.err.cant_create = Problem loading {0}: Can''t create game: {1}
admin.loadgame.err.problem_loading = Problem loading {0}: {1}
admin.loadgame.err.too_new = Problem loading {0}: Too new: {1}
# version number format {1,number,#} avoids automatic thousands separator: want "2400" not "2,400" here
admin.loadgame.err.too_new.vers = Problem loading {0}: Too new: gameMinVersion is {1,number,#}
admin.loadgame.ok.game_renamed = Game was renamed: Original name {0} is already used.
admin.loadgame.ok.to_continue_resumegame = >>> To continue playing, type *RESUMEGAME*
admin.loadsavegame.resp.gamename.chars = gamename can only include letters, numbers, dashes, underscores.
admin.loadsavegame.resp.disabled_prop = {0} is disabled: Must set {1} property
admin.loadsavegame.resp.disabled_init = {0} is disabled: Initialization failed. Check startup messages on server console.
admin.loadsavegame.err.dir_no_access = Warning: Can''t access savegame.dir {0}: {1}
admin.loadsavegame.err.dir_not_dir = savegame.dir file exists but isn''t a directory: {0}
admin.loadsavegame.err.dir_not_found = savegame.dir not found: {0}
admin.resumegame.resp.not_waiting = This game is not waiting to be resumed.
admin.resumegame.resp.usage = Usage: *RESUMEGAME* with no arguments
admin.resumegame.err.not_enough_robots = >>> Cannot resume: Not enough robots to fill non-vacant seats.
admin.resumegame.ok.resuming = >>> Resuming game play.
admin.resumegame.warn.dev_card_deck_contains_unknown_card_type = >>> Warning: Dev card deck contains unknown card type at index {0}
admin.resumegame.warn.human_with_bot_name = >>> Warning: At least 1 player is named like a robot, but isRobot flag is false. Can cause problems when resuming game.
admin.savegame.resp.file_exists = Game file already exists: Add -f flag to force, or use a different name
admin.savegame.resp.must_initial_placement = Must finish initial placement before saving.
admin.savegame.resp.must_resume = Must resume loaded game before saving again.
admin.savegame.resp.usage = Usage: *SAVEGAME* [-f] gamename
# {0} can be from admin.savegame.cannot_save.* or freeform text
admin.savegame.err.cannot_save_has = Cannot save this game, because it has {0}
admin.savegame.err.problem_saving = Problem saving game: {0}
# the reason can't save or load, for admin.savegame.err.cannot_save_has
admin.savegame.cannot_save.scen = scenario {0} with game option {1}
admin.savegame.ok.saved_to = Saved game to {0}

